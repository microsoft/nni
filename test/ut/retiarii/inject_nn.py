import inspect

import torch
import torch.nn as nn

from nni.retiarii.utils import version_larger_equal


def wrap_module(original_class):
    orig_init = original_class.__init__
    argname_list = list(inspect.signature(original_class).parameters.keys())
    # Make copy of original __init__, so we can call it without recursion
    original_class.bak_init_for_inject = orig_init

    def __init__(self, *args, **kws):
        full_args = {}
        full_args.update(kws)
        for i, arg in enumerate(args):
            full_args[argname_list[i]] = arg
        self.trace_kwargs = full_args

        orig_init(self, *args, **kws)  # Call the original __init__

    original_class.__init__ = __init__  # Set the class' __init__ to the new one
    return original_class


def unwrap_module(wrapped_class):
    if hasattr(wrapped_class, 'bak_init_for_inject'):
        wrapped_class.__init__ = wrapped_class.bak_init_for_inject
        delattr(wrapped_class, 'bak_init_for_inject')
    return None


def remove_inject_pytorch_nn():
    unwrap_module(nn.Identity)
    unwrap_module(nn.Linear)
    unwrap_module(nn.Conv1d)
    unwrap_module(nn.Conv2d)
    unwrap_module(nn.Conv3d)
    unwrap_module(nn.ConvTranspose1d)
    unwrap_module(nn.ConvTranspose2d)
    unwrap_module(nn.ConvTranspose3d)
    unwrap_module(nn.Threshold)
    unwrap_module(nn.ReLU)
    unwrap_module(nn.Hardtanh)
    unwrap_module(nn.ReLU6)
    unwrap_module(nn.Sigmoid)
    unwrap_module(nn.Tanh)
    unwrap_module(nn.Softmax)
    unwrap_module(nn.Softmax2d)
    unwrap_module(nn.LogSoftmax)
    unwrap_module(nn.ELU)
    unwrap_module(nn.SELU)
    unwrap_module(nn.CELU)
    unwrap_module(nn.GLU)
    unwrap_module(nn.GELU)
    unwrap_module(nn.Hardshrink)
    unwrap_module(nn.LeakyReLU)
    unwrap_module(nn.LogSigmoid)
    unwrap_module(nn.Softplus)
    unwrap_module(nn.Softshrink)
    unwrap_module(nn.MultiheadAttention)
    unwrap_module(nn.PReLU)
    unwrap_module(nn.Softsign)
    unwrap_module(nn.Softmin)
    unwrap_module(nn.Tanhshrink)
    unwrap_module(nn.RReLU)
    unwrap_module(nn.AvgPool1d)
    unwrap_module(nn.AvgPool2d)
    unwrap_module(nn.AvgPool3d)
    unwrap_module(nn.MaxPool1d)
    unwrap_module(nn.MaxPool2d)
    unwrap_module(nn.MaxPool3d)
    unwrap_module(nn.MaxUnpool1d)
    unwrap_module(nn.MaxUnpool2d)
    unwrap_module(nn.MaxUnpool3d)
    unwrap_module(nn.FractionalMaxPool2d)
    unwrap_module(nn.FractionalMaxPool3d)
    unwrap_module(nn.LPPool1d)
    unwrap_module(nn.LPPool2d)
    unwrap_module(nn.LocalResponseNorm)
    unwrap_module(nn.BatchNorm1d)
    unwrap_module(nn.BatchNorm2d)
    unwrap_module(nn.BatchNorm3d)
    unwrap_module(nn.InstanceNorm1d)
    unwrap_module(nn.InstanceNorm2d)
    unwrap_module(nn.InstanceNorm3d)
    unwrap_module(nn.LayerNorm)
    unwrap_module(nn.GroupNorm)
    unwrap_module(nn.SyncBatchNorm)
    unwrap_module(nn.Dropout)
    unwrap_module(nn.Dropout2d)
    unwrap_module(nn.Dropout3d)
    unwrap_module(nn.AlphaDropout)
    unwrap_module(nn.FeatureAlphaDropout)
    unwrap_module(nn.ReflectionPad1d)
    unwrap_module(nn.ReflectionPad2d)
    unwrap_module(nn.ReplicationPad2d)
    unwrap_module(nn.ReplicationPad1d)
    unwrap_module(nn.ReplicationPad3d)
    unwrap_module(nn.CrossMapLRN2d)
    unwrap_module(nn.Embedding)
    unwrap_module(nn.EmbeddingBag)
    unwrap_module(nn.RNNBase)
    unwrap_module(nn.RNN)
    unwrap_module(nn.LSTM)
    unwrap_module(nn.GRU)
    unwrap_module(nn.RNNCellBase)
    unwrap_module(nn.RNNCell)
    unwrap_module(nn.LSTMCell)
    unwrap_module(nn.GRUCell)
    unwrap_module(nn.PixelShuffle)
    unwrap_module(nn.Upsample)
    unwrap_module(nn.UpsamplingNearest2d)
    unwrap_module(nn.UpsamplingBilinear2d)
    unwrap_module(nn.PairwiseDistance)
    unwrap_module(nn.AdaptiveMaxPool1d)
    unwrap_module(nn.AdaptiveMaxPool2d)
    unwrap_module(nn.AdaptiveMaxPool3d)
    unwrap_module(nn.AdaptiveAvgPool1d)
    unwrap_module(nn.AdaptiveAvgPool2d)
    unwrap_module(nn.AdaptiveAvgPool3d)
    unwrap_module(nn.TripletMarginLoss)
    unwrap_module(nn.ZeroPad2d)
    unwrap_module(nn.ConstantPad1d)
    unwrap_module(nn.ConstantPad2d)
    unwrap_module(nn.ConstantPad3d)
    unwrap_module(nn.Bilinear)
    unwrap_module(nn.CosineSimilarity)
    unwrap_module(nn.Unfold)
    unwrap_module(nn.Fold)
    unwrap_module(nn.AdaptiveLogSoftmaxWithLoss)
    unwrap_module(nn.TransformerEncoder)
    unwrap_module(nn.TransformerDecoder)
    unwrap_module(nn.TransformerEncoderLayer)
    unwrap_module(nn.TransformerDecoderLayer)
    unwrap_module(nn.Transformer)
    unwrap_module(nn.Flatten)
    unwrap_module(nn.Hardsigmoid)

    if version_larger_equal(torch.__version__, '1.6.0'):
        unwrap_module(nn.Hardswish)

    if version_larger_equal(torch.__version__, '1.7.0'):
        unwrap_module(nn.SiLU)
        unwrap_module(nn.Unflatten)
        unwrap_module(nn.TripletMarginWithDistanceLoss)


def inject_pytorch_nn():
    wrap_module(nn.Identity)
    wrap_module(nn.Linear)
    wrap_module(nn.Conv1d)
    wrap_module(nn.Conv2d)
    wrap_module(nn.Conv3d)
    wrap_module(nn.ConvTranspose1d)
    wrap_module(nn.ConvTranspose2d)
    wrap_module(nn.ConvTranspose3d)
    wrap_module(nn.Threshold)
    wrap_module(nn.ReLU)
    wrap_module(nn.Hardtanh)
    wrap_module(nn.ReLU6)
    wrap_module(nn.Sigmoid)
    wrap_module(nn.Tanh)
    wrap_module(nn.Softmax)
    wrap_module(nn.Softmax2d)
    wrap_module(nn.LogSoftmax)
    wrap_module(nn.ELU)
    wrap_module(nn.SELU)
    wrap_module(nn.CELU)
    wrap_module(nn.GLU)
    wrap_module(nn.GELU)
    wrap_module(nn.Hardshrink)
    wrap_module(nn.LeakyReLU)
    wrap_module(nn.LogSigmoid)
    wrap_module(nn.Softplus)
    wrap_module(nn.Softshrink)
    wrap_module(nn.MultiheadAttention)
    wrap_module(nn.PReLU)
    wrap_module(nn.Softsign)
    wrap_module(nn.Softmin)
    wrap_module(nn.Tanhshrink)
    wrap_module(nn.RReLU)
    wrap_module(nn.AvgPool1d)
    wrap_module(nn.AvgPool2d)
    wrap_module(nn.AvgPool3d)
    wrap_module(nn.MaxPool1d)
    wrap_module(nn.MaxPool2d)
    wrap_module(nn.MaxPool3d)
    wrap_module(nn.MaxUnpool1d)
    wrap_module(nn.MaxUnpool2d)
    wrap_module(nn.MaxUnpool3d)
    wrap_module(nn.FractionalMaxPool2d)
    wrap_module(nn.FractionalMaxPool3d)
    wrap_module(nn.LPPool1d)
    wrap_module(nn.LPPool2d)
    wrap_module(nn.LocalResponseNorm)
    wrap_module(nn.BatchNorm1d)
    wrap_module(nn.BatchNorm2d)
    wrap_module(nn.BatchNorm3d)
    wrap_module(nn.InstanceNorm1d)
    wrap_module(nn.InstanceNorm2d)
    wrap_module(nn.InstanceNorm3d)
    wrap_module(nn.LayerNorm)
    wrap_module(nn.GroupNorm)
    wrap_module(nn.SyncBatchNorm)
    wrap_module(nn.Dropout)
    wrap_module(nn.Dropout2d)
    wrap_module(nn.Dropout3d)
    wrap_module(nn.AlphaDropout)
    wrap_module(nn.FeatureAlphaDropout)
    wrap_module(nn.ReflectionPad1d)
    wrap_module(nn.ReflectionPad2d)
    wrap_module(nn.ReplicationPad2d)
    wrap_module(nn.ReplicationPad1d)
    wrap_module(nn.ReplicationPad3d)
    wrap_module(nn.CrossMapLRN2d)
    wrap_module(nn.Embedding)
    wrap_module(nn.EmbeddingBag)
    wrap_module(nn.RNNBase)
    wrap_module(nn.RNN)
    wrap_module(nn.LSTM)
    wrap_module(nn.GRU)
    wrap_module(nn.RNNCellBase)
    wrap_module(nn.RNNCell)
    wrap_module(nn.LSTMCell)
    wrap_module(nn.GRUCell)
    wrap_module(nn.PixelShuffle)
    wrap_module(nn.Upsample)
    wrap_module(nn.UpsamplingNearest2d)
    wrap_module(nn.UpsamplingBilinear2d)
    wrap_module(nn.PairwiseDistance)
    wrap_module(nn.AdaptiveMaxPool1d)
    wrap_module(nn.AdaptiveMaxPool2d)
    wrap_module(nn.AdaptiveMaxPool3d)
    wrap_module(nn.AdaptiveAvgPool1d)
    wrap_module(nn.AdaptiveAvgPool2d)
    wrap_module(nn.AdaptiveAvgPool3d)
    wrap_module(nn.TripletMarginLoss)
    wrap_module(nn.ZeroPad2d)
    wrap_module(nn.ConstantPad1d)
    wrap_module(nn.ConstantPad2d)
    wrap_module(nn.ConstantPad3d)
    wrap_module(nn.Bilinear)
    wrap_module(nn.CosineSimilarity)
    wrap_module(nn.Unfold)
    wrap_module(nn.Fold)
    wrap_module(nn.AdaptiveLogSoftmaxWithLoss)
    wrap_module(nn.TransformerEncoder)
    wrap_module(nn.TransformerDecoder)
    wrap_module(nn.TransformerEncoderLayer)
    wrap_module(nn.TransformerDecoderLayer)
    wrap_module(nn.Transformer)
    wrap_module(nn.Flatten)
    wrap_module(nn.Hardsigmoid)

    if version_larger_equal(torch.__version__, '1.6.0'):
        wrap_module(nn.Hardswish)

    if version_larger_equal(torch.__version__, '1.7.0'):
        wrap_module(nn.SiLU)
        wrap_module(nn.Unflatten)
        wrap_module(nn.TripletMarginWithDistanceLoss)
