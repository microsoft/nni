
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/pruning_bert_glue.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_pruning_bert_glue.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_pruning_bert_glue.py:


Pruning Bert on Task MNLI
=========================

Workable Pruning Process
------------------------

Here we show an effective transformer pruning process that NNI team has tried, and users can use NNI to discover better processes.

The entire pruning process can be divided into the following steps:

1. Finetune the pre-trained model on the downstream task. From our experience,
   the final performance of pruning on the finetuned model is better than pruning directly on the pre-trained model.
   At the same time, the finetuned model obtained in this step will also be used as the teacher model for the following
   distillation training.
2. Pruning the attention layer at first. Here we apply block-sparse on attention layer weight,
   and directly prune the head (condense the weight) if the head was fully masked.
   If the head was partially masked, we will not prune it and recover its weight.
3. Retrain the head-pruned model with distillation. Recover the model precision before pruning FFN layer.
4. Pruning the FFN layer. Here we apply the output channels pruning on the 1st FFN layer,
   and the 2nd FFN layer input channels will be pruned due to the pruning of 1st layer output channels.
5. Retrain the final pruned model with distillation.

During the process of pruning transformer, we gained some of the following experiences:

* We using :ref:`movement-pruner` in step 2 and :ref:`taylor-fo-weight-pruner` in step 4. :ref:`movement-pruner` has good performance on attention layers,
  and :ref:`taylor-fo-weight-pruner` method has good performance on FFN layers. These two pruners are all some kinds of gradient-based pruning algorithms,
  we also try weight-based pruning algorithms like :ref:`l1-norm-pruner`, but it doesn't seem to work well in this scenario.
* Distillation is a good way to recover model precision. In terms of results, usually 1~2% improvement in accuracy can be achieved when we prune bert on mnli task.
* It is necessary to gradually increase the sparsity rather than reaching a very high sparsity all at once.

Experiment
----------

The complete pruning process will take about 8 hours on one A100.

Preparation
^^^^^^^^^^^

This section is mainly to get a finetuned model on the downstream task.
If you are familiar with how to finetune Bert on GLUE dataset, you can skip this section.

.. note::

    Please set ``dev_mode`` to ``False`` to run this tutorial. Here ``dev_mode`` is ``True`` by default is for generating documents.

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: default


    dev_mode = True








.. GENERATED FROM PYTHON SOURCE LINES 52-53

Some basic setting.

.. GENERATED FROM PYTHON SOURCE LINES 53-84

.. code-block:: default


    from pathlib import Path
    from typing import Callable, Dict

    pretrained_model_name_or_path = 'bert-base-uncased'
    task_name = 'mnli'
    experiment_id = 'pruning_bert_mnli'

    # heads_num and layers_num should align with pretrained_model_name_or_path
    heads_num = 12
    layers_num = 12

    # used to save the experiment log
    log_dir = Path(f'./pruning_log/{pretrained_model_name_or_path}/{task_name}/{experiment_id}')
    log_dir.mkdir(parents=True, exist_ok=True)

    # used to save the finetuned model and share between different experiemnts with same pretrained_model_name_or_path and task_name
    model_dir = Path(f'./models/{pretrained_model_name_or_path}/{task_name}')
    model_dir.mkdir(parents=True, exist_ok=True)

    # used to save GLUE data
    data_dir = Path(f'./data')
    data_dir.mkdir(parents=True, exist_ok=True)

    # set seed
    from transformers import set_seed
    set_seed(1024)

    import torch
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')








.. GENERATED FROM PYTHON SOURCE LINES 85-86

Create dataloaders.

.. GENERATED FROM PYTHON SOURCE LINES 86-152

.. code-block:: default


    from torch.utils.data import DataLoader

    from datasets import load_dataset
    from transformers import BertTokenizerFast, DataCollatorWithPadding

    task_to_keys = {
        'cola': ('sentence', None),
        'mnli': ('premise', 'hypothesis'),
        'mrpc': ('sentence1', 'sentence2'),
        'qnli': ('question', 'sentence'),
        'qqp': ('question1', 'question2'),
        'rte': ('sentence1', 'sentence2'),
        'sst2': ('sentence', None),
        'stsb': ('sentence1', 'sentence2'),
        'wnli': ('sentence1', 'sentence2'),
    }

    def prepare_dataloaders(cache_dir=data_dir, train_batch_size=32, eval_batch_size=32):
        tokenizer = BertTokenizerFast.from_pretrained(pretrained_model_name_or_path)
        sentence1_key, sentence2_key = task_to_keys[task_name]
        data_collator = DataCollatorWithPadding(tokenizer)

        # used to preprocess the raw data
        def preprocess_function(examples):
            # Tokenize the texts
            args = (
                (examples[sentence1_key],) if sentence2_key is None else (examples[sentence1_key], examples[sentence2_key])
            )
            result = tokenizer(*args, padding=False, max_length=128, truncation=True)

            if 'label' in examples:
                # In all cases, rename the column to labels because the model will expect that.
                result['labels'] = examples['label']
            return result

        raw_datasets = load_dataset('glue', task_name, cache_dir=cache_dir)
        for key in list(raw_datasets.keys()):
            if 'test' in key:
                raw_datasets.pop(key)

        processed_datasets = raw_datasets.map(preprocess_function, batched=True,
                                              remove_columns=raw_datasets['train'].column_names)

        train_dataset = processed_datasets['train']
        if task_name == 'mnli':
            validation_datasets = {
                'validation_matched': processed_datasets['validation_matched'],
                'validation_mismatched': processed_datasets['validation_mismatched']
            }
        else:
            validation_datasets = {
                'validation': processed_datasets['validation']
            }

        train_dataloader = DataLoader(train_dataset, shuffle=True, collate_fn=data_collator, batch_size=train_batch_size)
        validation_dataloaders = {
            val_name: DataLoader(val_dataset, collate_fn=data_collator, batch_size=eval_batch_size) \
                for val_name, val_dataset in validation_datasets.items()
        }

        return train_dataloader, validation_dataloaders


    train_dataloader, validation_dataloaders = prepare_dataloaders()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading:   0%|          | 0.00/28.0 [00:00<?, ?B/s]    Downloading: 100%|##########| 28.0/28.0 [00:00<00:00, 21.3kB/s]
    Downloading:   0%|          | 0.00/232k [00:00<?, ?B/s]    Downloading:  14%|#4        | 32.8k/232k [00:00<00:01, 145kB/s]    Downloading:  37%|###7      | 86.0k/232k [00:00<00:00, 198kB/s]    Downloading:  80%|#######9  | 184k/232k [00:00<00:00, 306kB/s]     Downloading: 100%|##########| 232k/232k [00:00<00:00, 339kB/s]
    Downloading:   0%|          | 0.00/466k [00:00<?, ?B/s]    Downloading:   3%|2         | 12.3k/466k [00:00<00:08, 54.4kB/s]    Downloading:   7%|7         | 32.8k/466k [00:00<00:05, 75.7kB/s]    Downloading:  20%|##        | 94.2k/466k [00:00<00:02, 165kB/s]     Downloading:  44%|####3     | 205k/466k [00:00<00:00, 293kB/s]     Downloading:  90%|########9 | 418k/466k [00:01<00:00, 527kB/s]    Downloading: 100%|##########| 466k/466k [00:01<00:00, 411kB/s]
    Downloading:   0%|          | 0.00/570 [00:00<?, ?B/s]    Downloading: 100%|##########| 570/570 [00:00<00:00, 467kB/s]
    Downloading builder script:   0%|          | 0.00/28.8k [00:00<?, ?B/s]    Downloading builder script:  14%|#4        | 4.10k/28.8k [00:00<00:01, 18.1kB/s]    Downloading builder script: 100%|##########| 28.8k/28.8k [00:00<00:00, 126kB/s] 
    Downloading metadata:   0%|          | 0.00/28.7k [00:00<?, ?B/s]    Downloading metadata:  43%|####2     | 12.3k/28.7k [00:00<00:00, 54.3kB/s]    Downloading metadata: 100%|##########| 28.7k/28.7k [00:00<00:00, 125kB/s] 
    Downloading readme:   0%|          | 0.00/27.8k [00:00<?, ?B/s]    Downloading readme:  15%|#4        | 4.10k/27.8k [00:00<00:01, 18.1kB/s]    Downloading readme: 100%|##########| 27.8k/27.8k [00:00<00:00, 122kB/s] 
    Downloading and preparing dataset glue/mnli to /home/nni-test/nni/examples/tutorials/data/glue/mnli/1.0.0/dacbe3125aa31d7f70367a07a8a9e72a5a0bfeb5fc42e75c9db75b96da6053ad...
    Downloading data:   0%|          | 0.00/313M [00:00<?, ?B/s]    Downloading data:   0%|          | 8.19k/313M [00:00<1:22:03, 63.5kB/s]    Downloading data:   0%|          | 53.2k/313M [00:00<22:50, 228kB/s]       Downloading data:   0%|          | 105k/313M [00:00<17:04, 305kB/s]     Downloading data:   0%|          | 159k/313M [00:00<15:08, 344kB/s]    Downloading data:   0%|          | 214k/313M [00:00<13:58, 373kB/s]    Downloading data:   0%|          | 261k/313M [00:00<14:41, 354kB/s]    Downloading data:   0%|          | 324k/313M [00:00<13:04, 398kB/s]    Downloading data:   0%|          | 387k/313M [00:01<12:15, 425kB/s]    Downloading data:   0%|          | 450k/313M [00:01<11:44, 443kB/s]    Downloading data:   0%|          | 513k/313M [00:01<11:25, 455kB/s]    Downloading data:   0%|          | 585k/313M [00:01<10:51, 479kB/s]    Downloading data:   0%|          | 666k/313M [00:01<09:55, 524kB/s]    Downloading data:   0%|          | 737k/313M [00:01<09:48, 531kB/s]    Downloading data:   0%|          | 816k/313M [00:01<09:29, 548kB/s]    Downloading data:   0%|          | 908k/313M [00:01<09:03, 574kB/s]    Downloading data:   0%|          | 998k/313M [00:02<08:16, 628kB/s]    Downloading data:   0%|          | 1.09M/313M [00:02<07:55, 655kB/s]    Downloading data:   0%|          | 1.18M/313M [00:02<07:53, 658kB/s]    Downloading data:   0%|          | 1.30M/313M [00:02<07:08, 727kB/s]    Downloading data:   0%|          | 1.39M/313M [00:02<07:01, 739kB/s]    Downloading data:   0%|          | 1.51M/313M [00:02<06:38, 781kB/s]    Downloading data:   1%|          | 1.64M/313M [00:02<06:18, 821kB/s]    Downloading data:   1%|          | 1.76M/313M [00:03<06:08, 845kB/s]    Downloading data:   1%|          | 1.90M/313M [00:03<05:38, 919kB/s]    Downloading data:   1%|          | 2.04M/313M [00:03<05:22, 962kB/s]    Downloading data:   1%|          | 2.17M/313M [00:03<05:13, 990kB/s]    Downloading data:   1%|          | 2.33M/313M [00:03<04:54, 1.05MB/s]    Downloading data:   1%|          | 2.49M/313M [00:03<04:43, 1.09MB/s]    Downloading data:   1%|          | 2.66M/313M [00:03<04:26, 1.16MB/s]    Downloading data:   1%|          | 2.84M/313M [00:03<04:15, 1.21MB/s]    Downloading data:   1%|          | 3.03M/313M [00:04<04:01, 1.28MB/s]    Downloading data:   1%|1         | 3.22M/313M [00:04<04:57, 1.04MB/s]    Downloading data:   1%|1         | 3.64M/313M [00:04<03:18, 1.56MB/s]    Downloading data:   1%|1         | 3.86M/313M [00:04<03:14, 1.59MB/s]    Downloading data:   1%|1         | 4.11M/313M [00:04<03:04, 1.67MB/s]    Downloading data:   1%|1         | 4.35M/313M [00:04<02:55, 1.76MB/s]    Downloading data:   1%|1         | 4.61M/313M [00:04<02:49, 1.82MB/s]    Downloading data:   2%|1         | 4.89M/313M [00:05<02:45, 1.87MB/s]    Downloading data:   2%|1         | 5.19M/313M [00:05<02:35, 1.98MB/s]    Downloading data:   2%|1         | 5.48M/313M [00:05<02:29, 2.06MB/s]    Downloading data:   2%|1         | 5.81M/313M [00:05<02:19, 2.19MB/s]    Downloading data:   2%|1         | 6.14M/313M [00:05<02:14, 2.28MB/s]    Downloading data:   2%|2         | 6.49M/313M [00:05<02:07, 2.40MB/s]    Downloading data:   2%|2         | 6.86M/313M [00:05<02:01, 2.51MB/s]    Downloading data:   2%|2         | 7.26M/313M [00:06<01:52, 2.72MB/s]    Downloading data:   2%|2         | 7.66M/313M [00:06<01:51, 2.74MB/s]    Downloading data:   3%|2         | 8.09M/313M [00:06<01:42, 2.99MB/s]    Downloading data:   3%|2         | 8.53M/313M [00:06<01:40, 3.03MB/s]    Downloading data:   3%|2         | 9.00M/313M [00:06<01:33, 3.26MB/s]    Downloading data:   3%|3         | 9.50M/313M [00:06<01:30, 3.36MB/s]    Downloading data:   3%|3         | 10.0M/313M [00:06<01:26, 3.49MB/s]    Downloading data:   3%|3         | 10.6M/313M [00:06<01:21, 3.72MB/s]    Downloading data:   4%|3         | 11.1M/313M [00:07<01:15, 3.98MB/s]    Downloading data:   4%|3         | 11.7M/313M [00:07<01:13, 4.07MB/s]    Downloading data:   4%|3         | 12.4M/313M [00:07<01:09, 4.30MB/s]    Downloading data:   4%|4         | 13.0M/313M [00:07<01:06, 4.51MB/s]    Downloading data:   4%|4         | 13.7M/313M [00:07<01:01, 4.83MB/s]    Downloading data:   5%|4         | 14.4M/313M [00:07<01:00, 4.95MB/s]    Downloading data:   5%|4         | 15.2M/313M [00:07<00:57, 5.21MB/s]    Downloading data:   5%|5         | 16.0M/313M [00:08<00:54, 5.49MB/s]    Downloading data:   5%|5         | 16.9M/313M [00:08<00:50, 5.87MB/s]    Downloading data:   6%|5         | 17.7M/313M [00:08<00:48, 6.12MB/s]    Downloading data:   6%|5         | 18.7M/313M [00:08<00:45, 6.42MB/s]    Downloading data:   6%|6         | 19.7M/313M [00:08<00:43, 6.73MB/s]    Downloading data:   7%|6         | 20.7M/313M [00:08<00:41, 7.05MB/s]    Downloading data:   7%|6         | 21.8M/313M [00:08<00:39, 7.37MB/s]    Downloading data:   7%|7         | 22.9M/313M [00:08<00:37, 7.74MB/s]    Downloading data:   8%|7         | 24.1M/313M [00:09<00:35, 8.09MB/s]    Downloading data:   8%|8         | 25.3M/313M [00:09<00:34, 8.36MB/s]    Downloading data:   9%|8         | 26.6M/313M [00:09<00:32, 8.94MB/s]    Downloading data:   9%|8         | 28.0M/313M [00:09<00:30, 9.30MB/s]    Downloading data:   9%|9         | 29.4M/313M [00:09<00:28, 9.90MB/s]    Downloading data:  10%|9         | 30.9M/313M [00:09<00:27, 10.3MB/s]    Downloading data:  10%|#         | 32.5M/313M [00:09<00:25, 10.8MB/s]    Downloading data:  11%|#         | 34.2M/313M [00:09<00:24, 11.4MB/s]    Downloading data:  11%|#1        | 35.9M/313M [00:10<00:23, 11.9MB/s]    Downloading data:  12%|#2        | 37.7M/313M [00:10<00:22, 12.3MB/s]    Downloading data:  13%|#2        | 39.6M/313M [00:10<00:21, 12.9MB/s]    Downloading data:  13%|#3        | 41.6M/313M [00:10<00:19, 13.9MB/s]    Downloading data:  14%|#3        | 43.7M/313M [00:10<00:18, 14.2MB/s]    Downloading data:  15%|#4        | 46.0M/313M [00:10<00:17, 15.3MB/s]    Downloading data:  15%|#5        | 48.3M/313M [00:10<00:16, 15.9MB/s]    Downloading data:  16%|#6        | 50.7M/313M [00:11<00:15, 16.7MB/s]    Downloading data:  17%|#7        | 53.2M/313M [00:11<00:14, 17.5MB/s]    Downloading data:  18%|#7        | 55.9M/313M [00:11<00:14, 18.3MB/s]    Downloading data:  19%|#8        | 58.7M/313M [00:11<00:13, 19.1MB/s]    Downloading data:  20%|#9        | 61.5M/313M [00:11<00:11, 21.3MB/s]    Downloading data:  21%|##        | 64.4M/313M [00:11<00:10, 23.1MB/s]    Downloading data:  21%|##1       | 66.8M/313M [00:11<00:10, 22.5MB/s]    Downloading data:  22%|##2       | 69.1M/313M [00:11<00:11, 21.2MB/s]    Downloading data:  23%|##2       | 71.2M/313M [00:11<00:11, 20.8MB/s]    Downloading data:  24%|##3       | 74.4M/313M [00:12<00:10, 22.3MB/s]    Downloading data:  25%|##4       | 77.8M/313M [00:12<00:09, 23.5MB/s]    Downloading data:  26%|##6       | 81.4M/313M [00:12<00:09, 24.6MB/s]    Downloading data:  27%|##7       | 85.2M/313M [00:12<00:08, 25.9MB/s]    Downloading data:  28%|##8       | 87.9M/313M [00:12<00:09, 24.2MB/s]    Downloading data:  29%|##9       | 91.7M/313M [00:12<00:08, 25.3MB/s]    Downloading data:  31%|###       | 95.7M/313M [00:12<00:08, 26.9MB/s]    Downloading data:  32%|###1      | 99.7M/313M [00:13<00:07, 27.7MB/s]    Downloading data:  33%|###3      | 104M/313M [00:13<00:07, 28.3MB/s]     Downloading data:  34%|###4      | 108M/313M [00:13<00:07, 28.7MB/s]    Downloading data:  36%|###5      | 112M/313M [00:13<00:07, 28.6MB/s]    Downloading data:  37%|###6      | 116M/313M [00:13<00:06, 29.2MB/s]    Downloading data:  38%|###8      | 120M/313M [00:13<00:06, 29.5MB/s]    Downloading data:  40%|###9      | 124M/313M [00:13<00:06, 29.4MB/s]    Downloading data:  41%|####      | 128M/313M [00:14<00:06, 29.8MB/s]    Downloading data:  42%|####2     | 132M/313M [00:14<00:06, 30.1MB/s]    Downloading data:  44%|####3     | 136M/313M [00:14<00:05, 30.1MB/s]    Downloading data:  45%|####4     | 140M/313M [00:14<00:05, 29.8MB/s]    Downloading data:  46%|####6     | 144M/313M [00:14<00:05, 29.8MB/s]    Downloading data:  47%|####7     | 148M/313M [00:14<00:05, 29.6MB/s]    Downloading data:  49%|####8     | 152M/313M [00:14<00:05, 29.4MB/s]    Downloading data:  50%|####9     | 156M/313M [00:14<00:05, 29.2MB/s]    Downloading data:  51%|#####1    | 160M/313M [00:15<00:05, 29.6MB/s]    Downloading data:  52%|#####2    | 164M/313M [00:15<00:05, 29.4MB/s]    Downloading data:  54%|#####3    | 168M/313M [00:15<00:04, 29.4MB/s]    Downloading data:  55%|#####4    | 172M/313M [00:15<00:04, 29.3MB/s]    Downloading data:  56%|#####6    | 176M/313M [00:15<00:04, 29.6MB/s]    Downloading data:  58%|#####7    | 180M/313M [00:15<00:04, 29.8MB/s]    Downloading data:  59%|#####8    | 184M/313M [00:15<00:04, 29.9MB/s]    Downloading data:  60%|######    | 188M/313M [00:16<00:04, 29.7MB/s]    Downloading data:  61%|######1   | 192M/313M [00:16<00:04, 29.7MB/s]    Downloading data:  63%|######2   | 196M/313M [00:16<00:03, 30.0MB/s]    Downloading data:  64%|######3   | 200M/313M [00:16<00:03, 29.9MB/s]    Downloading data:  65%|######5   | 204M/313M [00:16<00:03, 30.0MB/s]    Downloading data:  67%|######6   | 208M/313M [00:16<00:03, 29.8MB/s]    Downloading data:  68%|######7   | 212M/313M [00:16<00:03, 29.5MB/s]    Downloading data:  69%|######9   | 216M/313M [00:16<00:03, 29.3MB/s]    Downloading data:  70%|#######   | 220M/313M [00:17<00:03, 29.9MB/s]    Downloading data:  72%|#######1  | 224M/313M [00:17<00:02, 30.1MB/s]    Downloading data:  73%|#######2  | 228M/313M [00:17<00:02, 30.0MB/s]    Downloading data:  74%|#######4  | 232M/313M [00:17<00:02, 30.4MB/s]    Downloading data:  76%|#######5  | 237M/313M [00:17<00:02, 30.2MB/s]    Downloading data:  77%|#######6  | 240M/313M [00:17<00:02, 29.9MB/s]    Downloading data:  78%|#######8  | 244M/313M [00:17<00:02, 29.7MB/s]    Downloading data:  79%|#######9  | 248M/313M [00:18<00:02, 29.5MB/s]    Downloading data:  81%|########  | 252M/313M [00:18<00:02, 29.7MB/s]    Downloading data:  82%|########1 | 256M/313M [00:18<00:01, 29.8MB/s]    Downloading data:  83%|########3 | 260M/313M [00:18<00:01, 29.9MB/s]    Downloading data:  84%|########4 | 264M/313M [00:18<00:01, 29.6MB/s]    Downloading data:  86%|########5 | 268M/313M [00:18<00:01, 29.3MB/s]    Downloading data:  87%|########6 | 272M/313M [00:18<00:01, 29.2MB/s]    Downloading data:  88%|########8 | 276M/313M [00:18<00:01, 29.6MB/s]    Downloading data:  90%|########9 | 280M/313M [00:19<00:01, 30.0MB/s]    Downloading data:  91%|######### | 285M/313M [00:19<00:00, 30.4MB/s]    Downloading data:  92%|#########2| 289M/313M [00:19<00:00, 30.6MB/s]    Downloading data:  94%|#########3| 293M/313M [00:19<00:00, 30.7MB/s]    Downloading data:  95%|#########4| 297M/313M [00:19<00:00, 30.2MB/s]    Downloading data:  96%|#########6| 301M/313M [00:19<00:00, 30.5MB/s]    Downloading data:  98%|#########7| 305M/313M [00:19<00:00, 30.4MB/s]    Downloading data:  99%|#########8| 309M/313M [00:20<00:00, 30.5MB/s]    Downloading data: 100%|#########9| 313M/313M [00:20<00:00, 28.1MB/s]    Downloading data: 100%|##########| 313M/313M [00:20<00:00, 15.5MB/s]
    Generating train split:   0%|          | 0/392702 [00:00<?, ? examples/s]    Generating train split:   1%|          | 2076/392702 [00:00<00:18, 20748.05 examples/s]    Generating train split:   1%|1         | 4207/392702 [00:00<00:18, 21074.73 examples/s]    Generating train split:   2%|1         | 6323/392702 [00:00<00:18, 21113.28 examples/s]    Generating train split:   2%|2         | 8444/392702 [00:00<00:18, 21149.75 examples/s]    Generating train split:   3%|2         | 10559/392702 [00:00<00:19, 19998.02 examples/s]    Generating train split:   3%|3         | 12725/392702 [00:00<00:18, 20527.07 examples/s]    Generating train split:   4%|3         | 14851/392702 [00:00<00:18, 20758.00 examples/s]    Generating train split:   4%|4         | 17000/392702 [00:00<00:17, 20984.36 examples/s]    Generating train split:   5%|4         | 19137/392702 [00:00<00:17, 21101.58 examples/s]    Generating train split:   5%|5         | 21251/392702 [00:01<00:18, 20511.30 examples/s]    Generating train split:   6%|5         | 23421/392702 [00:01<00:17, 20862.89 examples/s]    Generating train split:   7%|6         | 25594/392702 [00:01<00:17, 21120.82 examples/s]    Generating train split:   7%|7         | 27746/392702 [00:01<00:17, 21239.23 examples/s]    Generating train split:   8%|7         | 29880/392702 [00:01<00:17, 21267.58 examples/s]    Generating train split:   8%|8         | 32009/392702 [00:01<00:17, 20651.03 examples/s]    Generating train split:   9%|8         | 34168/392702 [00:01<00:17, 20925.94 examples/s]    Generating train split:   9%|9         | 36337/392702 [00:01<00:16, 21148.21 examples/s]    Generating train split:  10%|9         | 38482/392702 [00:01<00:16, 21236.45 examples/s]    Generating train split:  10%|#         | 40609/392702 [00:01<00:17, 20662.61 examples/s]    Generating train split:  11%|#         | 42755/392702 [00:02<00:16, 20895.65 examples/s]    Generating train split:  11%|#1        | 44915/392702 [00:02<00:16, 21101.10 examples/s]    Generating train split:  12%|#1        | 47078/392702 [00:02<00:16, 21256.90 examples/s]    Generating train split:  13%|#2        | 49207/392702 [00:02<00:16, 21158.47 examples/s]    Generating train split:  13%|#3        | 51325/392702 [00:02<00:16, 20552.15 examples/s]    Generating train split:  14%|#3        | 53481/392702 [00:02<00:16, 20845.53 examples/s]    Generating train split:  14%|#4        | 55602/392702 [00:02<00:16, 20951.91 examples/s]    Generating train split:  15%|#4        | 57701/392702 [00:02<00:16, 20927.20 examples/s]    Generating train split:  15%|#5        | 59830/392702 [00:02<00:15, 21033.54 examples/s]    Generating train split:  16%|#5        | 61935/392702 [00:02<00:16, 20604.97 examples/s]    Generating train split:  16%|#6        | 64064/392702 [00:03<00:15, 20805.12 examples/s]    Generating train split:  17%|#6        | 66177/392702 [00:03<00:15, 20897.87 examples/s]    Generating train split:  17%|#7        | 68289/392702 [00:03<00:15, 20961.26 examples/s]    Generating train split:  18%|#7        | 70387/392702 [00:03<00:15, 20324.00 examples/s]    Generating train split:  18%|#8        | 72541/392702 [00:03<00:15, 20677.81 examples/s]    Generating train split:  19%|#9        | 74703/392702 [00:03<00:15, 20953.47 examples/s]    Generating train split:  20%|#9        | 76856/392702 [00:03<00:14, 21123.69 examples/s]    Generating train split:  20%|##        | 79010/392702 [00:03<00:14, 21246.10 examples/s]    Generating train split:  21%|##        | 81137/392702 [00:03<00:15, 20428.70 examples/s]    Generating train split:  21%|##1       | 83246/392702 [00:03<00:15, 20618.00 examples/s]    Generating train split:  22%|##1       | 85410/392702 [00:04<00:14, 20915.84 examples/s]    Generating train split:  22%|##2       | 87568/392702 [00:04<00:14, 21110.36 examples/s]    Generating train split:  23%|##2       | 89717/392702 [00:04<00:14, 21222.66 examples/s]    Generating train split:  23%|##3       | 91843/392702 [00:04<00:14, 20705.74 examples/s]    Generating train split:  24%|##3       | 94018/392702 [00:04<00:14, 21010.31 examples/s]    Generating train split:  24%|##4       | 96174/392702 [00:04<00:14, 21171.23 examples/s]    Generating train split:  25%|##5       | 98336/392702 [00:04<00:13, 21302.24 examples/s]    Generating train split:  26%|##5       | 100469/392702 [00:04<00:14, 20670.54 examples/s]    Generating train split:  26%|##6       | 102635/392702 [00:04<00:13, 20957.83 examples/s]    Generating train split:  27%|##6       | 104736/392702 [00:05<00:18, 15366.42 examples/s]    Generating train split:  27%|##7       | 106875/392702 [00:05<00:17, 16783.42 examples/s]    Generating train split:  28%|##7       | 109035/392702 [00:05<00:15, 17994.68 examples/s]    Generating train split:  28%|##8       | 110991/392702 [00:05<00:15, 18375.07 examples/s]    Generating train split:  29%|##8       | 113161/392702 [00:05<00:14, 19284.03 examples/s]    Generating train split:  29%|##9       | 115311/392702 [00:05<00:13, 19905.38 examples/s]    Generating train split:  30%|##9       | 117476/392702 [00:05<00:13, 20403.36 examples/s]    Generating train split:  30%|###       | 119633/392702 [00:05<00:13, 20741.97 examples/s]    Generating train split:  31%|###1      | 121743/392702 [00:05<00:13, 20317.21 examples/s]    Generating train split:  32%|###1      | 123911/392702 [00:06<00:12, 20710.82 examples/s]    Generating train split:  32%|###2      | 126060/392702 [00:06<00:12, 20937.36 examples/s]    Generating train split:  33%|###2      | 128177/392702 [00:06<00:12, 21005.42 examples/s]    Generating train split:  33%|###3      | 130288/392702 [00:06<00:12, 20543.10 examples/s]    Generating train split:  34%|###3      | 132443/392702 [00:06<00:12, 20835.23 examples/s]    Generating train split:  34%|###4      | 134581/392702 [00:06<00:12, 20995.44 examples/s]    Generating train split:  35%|###4      | 136745/392702 [00:06<00:12, 21184.16 examples/s]    Generating train split:  35%|###5      | 138908/392702 [00:06<00:11, 21315.69 examples/s]    Generating train split:  36%|###5      | 141043/392702 [00:06<00:12, 20669.86 examples/s]    Generating train split:  36%|###6      | 143156/392702 [00:06<00:11, 20802.26 examples/s]    Generating train split:  37%|###6      | 145289/392702 [00:07<00:11, 20954.61 examples/s]    Generating train split:  38%|###7      | 147388/392702 [00:07<00:11, 20885.50 examples/s]    Generating train split:  38%|###8      | 149550/392702 [00:07<00:11, 21101.77 examples/s]    Generating train split:  39%|###8      | 151663/392702 [00:07<00:11, 20541.37 examples/s]    Generating train split:  39%|###9      | 153815/392702 [00:07<00:11, 20827.04 examples/s]    Generating train split:  40%|###9      | 155971/392702 [00:07<00:11, 21042.28 examples/s]    Generating train split:  40%|####      | 158124/392702 [00:07<00:11, 21186.29 examples/s]    Generating train split:  41%|####      | 160245/392702 [00:07<00:11, 20433.85 examples/s]    Generating train split:  41%|####1     | 162366/392702 [00:07<00:11, 20656.09 examples/s]    Generating train split:  42%|####1     | 164476/392702 [00:07<00:10, 20785.53 examples/s]    Generating train split:  42%|####2     | 166632/392702 [00:08<00:10, 21011.71 examples/s]    Generating train split:  43%|####2     | 168803/392702 [00:08<00:10, 21217.62 examples/s]    Generating train split:  44%|####3     | 170928/392702 [00:08<00:10, 20468.63 examples/s]    Generating train split:  44%|####4     | 173053/392702 [00:08<00:10, 20695.60 examples/s]    Generating train split:  45%|####4     | 175213/392702 [00:08<00:10, 20958.73 examples/s]    Generating train split:  45%|####5     | 177376/392702 [00:08<00:10, 21155.55 examples/s]    Generating train split:  46%|####5     | 179517/392702 [00:08<00:10, 21229.02 examples/s]    Generating train split:  46%|####6     | 181643/392702 [00:08<00:10, 20644.77 examples/s]    Generating train split:  47%|####6     | 183809/392702 [00:08<00:09, 20939.93 examples/s]    Generating train split:  47%|####7     | 185954/392702 [00:09<00:09, 21088.60 examples/s]    Generating train split:  48%|####7     | 188067/392702 [00:09<00:09, 21062.47 examples/s]    Generating train split:  48%|####8     | 190176/392702 [00:09<00:09, 20412.80 examples/s]    Generating train split:  49%|####8     | 192329/392702 [00:09<00:09, 20736.14 examples/s]    Generating train split:  50%|####9     | 194492/392702 [00:09<00:09, 20997.29 examples/s]    Generating train split:  50%|#####     | 196643/392702 [00:09<00:09, 21147.57 examples/s]    Generating train split:  51%|#####     | 198761/392702 [00:09<00:09, 21004.10 examples/s]    Generating train split:  51%|#####1    | 200864/392702 [00:09<00:09, 20462.57 examples/s]    Generating train split:  52%|#####1    | 203021/392702 [00:09<00:09, 20784.48 examples/s]    Generating train split:  52%|#####2    | 205187/392702 [00:09<00:08, 21041.44 examples/s]    Generating train split:  53%|#####2    | 207355/392702 [00:10<00:08, 21230.14 examples/s]    Generating train split:  53%|#####3    | 209522/392702 [00:10<00:08, 21359.78 examples/s]    Generating train split:  54%|#####3    | 211660/392702 [00:10<00:08, 20751.68 examples/s]    Generating train split:  54%|#####4    | 213746/392702 [00:10<00:08, 20782.49 examples/s]    Generating train split:  55%|#####4    | 215907/392702 [00:10<00:08, 21024.66 examples/s]    Generating train split:  56%|#####5    | 218013/392702 [00:10<00:08, 21018.55 examples/s]    Generating train split:  56%|#####6    | 220117/392702 [00:10<00:11, 14920.86 examples/s]    Generating train split:  57%|#####6    | 222265/392702 [00:10<00:10, 16438.50 examples/s]    Generating train split:  57%|#####7    | 224425/392702 [00:10<00:09, 17720.03 examples/s]    Generating train split:  58%|#####7    | 226585/392702 [00:11<00:08, 18734.51 examples/s]    Generating train split:  58%|#####8    | 228709/392702 [00:11<00:08, 19415.62 examples/s]    Generating train split:  59%|#####8    | 230756/392702 [00:11<00:08, 19381.51 examples/s]    Generating train split:  59%|#####9    | 232857/392702 [00:11<00:08, 19839.42 examples/s]    Generating train split:  60%|#####9    | 234974/392702 [00:11<00:07, 20221.39 examples/s]    Generating train split:  60%|######    | 237147/392702 [00:11<00:07, 20659.73 examples/s]    Generating train split:  61%|######    | 239313/392702 [00:11<00:07, 20952.54 examples/s]    Generating train split:  61%|######1   | 241430/392702 [00:11<00:07, 20480.88 examples/s]    Generating train split:  62%|######2   | 243591/392702 [00:11<00:07, 20808.22 examples/s]    Generating train split:  63%|######2   | 245722/392702 [00:11<00:07, 20954.00 examples/s]    Generating train split:  63%|######3   | 247879/392702 [00:12<00:06, 21133.98 examples/s]    Generating train split:  64%|######3   | 250000/392702 [00:12<00:06, 20573.61 examples/s]    Generating train split:  64%|######4   | 252149/392702 [00:12<00:06, 20839.57 examples/s]    Generating train split:  65%|######4   | 254299/392702 [00:12<00:06, 21032.85 examples/s]    Generating train split:  65%|######5   | 256463/392702 [00:12<00:06, 21212.06 examples/s]    Generating train split:  66%|######5   | 258626/392702 [00:12<00:06, 21332.94 examples/s]    Generating train split:  66%|######6   | 260762/392702 [00:12<00:06, 20760.92 examples/s]    Generating train split:  67%|######6   | 262843/392702 [00:12<00:06, 20716.09 examples/s]    Generating train split:  67%|######7   | 264996/392702 [00:12<00:06, 20952.93 examples/s]    Generating train split:  68%|######8   | 267114/392702 [00:13<00:05, 21018.70 examples/s]    Generating train split:  69%|######8   | 269268/392702 [00:13<00:05, 21172.02 examples/s]    Generating train split:  69%|######9   | 271387/392702 [00:13<00:05, 20650.89 examples/s]    Generating train split:  70%|######9   | 273535/392702 [00:13<00:05, 20892.72 examples/s]    Generating train split:  70%|#######   | 275673/392702 [00:13<00:05, 21034.38 examples/s]    Generating train split:  71%|#######   | 277794/392702 [00:13<00:05, 21086.07 examples/s]    Generating train split:  71%|#######1  | 279909/392702 [00:13<00:05, 21104.34 examples/s]    Generating train split:  72%|#######1  | 282021/392702 [00:13<00:05, 20561.56 examples/s]    Generating train split:  72%|#######2  | 284117/392702 [00:13<00:05, 20677.80 examples/s]    Generating train split:  73%|#######2  | 286287/392702 [00:13<00:05, 20977.10 examples/s]    Generating train split:  73%|#######3  | 288428/392702 [00:14<00:04, 21102.05 examples/s]    Generating train split:  74%|#######3  | 290541/392702 [00:14<00:04, 20570.68 examples/s]    Generating train split:  75%|#######4  | 292655/392702 [00:14<00:04, 20737.10 examples/s]    Generating train split:  75%|#######5  | 294784/392702 [00:14<00:04, 20899.98 examples/s]    Generating train split:  76%|#######5  | 296927/392702 [00:14<00:04, 21056.09 examples/s]    Generating train split:  76%|#######6  | 299035/392702 [00:14<00:04, 21062.72 examples/s]    Generating train split:  77%|#######6  | 301143/392702 [00:14<00:04, 20604.85 examples/s]    Generating train split:  77%|#######7  | 303302/392702 [00:14<00:04, 20892.22 examples/s]    Generating train split:  78%|#######7  | 305456/392702 [00:14<00:04, 21083.66 examples/s]    Generating train split:  78%|#######8  | 307618/392702 [00:14<00:04, 21242.81 examples/s]    Generating train split:  79%|#######8  | 309765/392702 [00:15<00:03, 21308.80 examples/s]    Generating train split:  79%|#######9  | 311898/392702 [00:15<00:03, 20566.59 examples/s]    Generating train split:  80%|#######9  | 314045/392702 [00:15<00:03, 20829.27 examples/s]    Generating train split:  81%|########  | 316211/392702 [00:15<00:03, 21072.58 examples/s]    Generating train split:  81%|########1 | 318368/392702 [00:15<00:03, 21218.16 examples/s]    Generating train split:  82%|########1 | 320493/392702 [00:15<00:03, 20691.98 examples/s]    Generating train split:  82%|########2 | 322618/392702 [00:15<00:03, 20852.63 examples/s]    Generating train split:  83%|########2 | 324784/392702 [00:15<00:03, 21089.67 examples/s]    Generating train split:  83%|########3 | 326948/392702 [00:15<00:03, 21250.99 examples/s]    Generating train split:  84%|########3 | 329076/392702 [00:15<00:03, 21017.86 examples/s]    Generating train split:  84%|########4 | 331180/392702 [00:16<00:02, 20516.37 examples/s]    Generating train split:  85%|########4 | 333322/392702 [00:16<00:02, 20777.75 examples/s]    Generating train split:  85%|########5 | 335476/392702 [00:16<00:02, 21000.26 examples/s]    Generating train split:  86%|########5 | 337579/392702 [00:16<00:03, 15382.15 examples/s]    Generating train split:  86%|########6 | 339613/392702 [00:16<00:03, 16552.47 examples/s]    Generating train split:  87%|########6 | 341522/392702 [00:16<00:02, 17191.42 examples/s]    Generating train split:  87%|########7 | 343578/392702 [00:16<00:02, 18082.92 examples/s]    Generating train split:  88%|########8 | 345704/392702 [00:16<00:02, 18955.14 examples/s]    Generating train split:  89%|########8 | 347867/392702 [00:17<00:02, 19707.42 examples/s]    Generating train split:  89%|########9 | 350000/392702 [00:17<00:02, 19602.71 examples/s]    Generating train split:  90%|########9 | 352152/392702 [00:17<00:02, 20148.43 examples/s]    Generating train split:  90%|######### | 354311/392702 [00:17<00:01, 20563.76 examples/s]    Generating train split:  91%|######### | 356431/392702 [00:17<00:01, 20748.27 examples/s]    Generating train split:  91%|#########1| 358525/392702 [00:17<00:01, 20765.00 examples/s]    Generating train split:  92%|#########1| 360615/392702 [00:17<00:01, 20399.05 examples/s]    Generating train split:  92%|#########2| 362784/392702 [00:17<00:01, 20775.78 examples/s]    Generating train split:  93%|#########2| 364920/392702 [00:17<00:01, 20946.21 examples/s]    Generating train split:  93%|#########3| 367021/392702 [00:17<00:01, 20760.27 examples/s]    Generating train split:  94%|#########4| 369175/392702 [00:18<00:01, 20989.70 examples/s]    Generating train split:  95%|#########4| 371278/392702 [00:18<00:01, 20451.17 examples/s]    Generating train split:  95%|#########5| 373427/392702 [00:18<00:00, 20751.85 examples/s]    Generating train split:  96%|#########5| 375581/392702 [00:18<00:00, 20982.61 examples/s]    Generating train split:  96%|#########6| 377738/392702 [00:18<00:00, 21155.05 examples/s]    Generating train split:  97%|#########6| 379857/392702 [00:18<00:00, 21078.56 examples/s]    Generating train split:  97%|#########7| 381967/392702 [00:18<00:00, 20533.57 examples/s]    Generating train split:  98%|#########7| 384025/392702 [00:18<00:00, 20515.88 examples/s]    Generating train split:  98%|#########8| 386188/392702 [00:18<00:00, 20841.65 examples/s]    Generating train split:  99%|#########8| 388361/392702 [00:18<00:00, 21104.32 examples/s]    Generating train split:  99%|#########9| 390474/392702 [00:19<00:00, 20611.68 examples/s]    Generating train split: 100%|#########9| 392582/392702 [00:19<00:00, 20748.43 examples/s]                                                                                             Generating validation_matched split:   0%|          | 0/9815 [00:00<?, ? examples/s]    Generating validation_matched split:  21%|##1       | 2072/9815 [00:00<00:00, 20713.20 examples/s]    Generating validation_matched split:  42%|####2     | 4144/9815 [00:00<00:00, 20631.17 examples/s]    Generating validation_matched split:  63%|######3   | 6208/9815 [00:00<00:00, 20435.38 examples/s]    Generating validation_matched split:  84%|########4 | 8252/9815 [00:00<00:00, 20141.67 examples/s]                                                                                                      Generating validation_mismatched split:   0%|          | 0/9832 [00:00<?, ? examples/s]    Generating validation_mismatched split:  21%|##        | 2028/9832 [00:00<00:00, 20276.10 examples/s]    Generating validation_mismatched split:  41%|####1     | 4056/9832 [00:00<00:00, 20179.16 examples/s]    Generating validation_mismatched split:  63%|######2   | 6173/9832 [00:00<00:00, 20628.44 examples/s]    Generating validation_mismatched split:  84%|########3 | 8236/9832 [00:00<00:00, 20440.70 examples/s]                                                                                                         Generating test_matched split:   0%|          | 0/9796 [00:00<?, ? examples/s]    Generating test_matched split:  24%|##3       | 2311/9796 [00:00<00:00, 23108.04 examples/s]    Generating test_matched split:  47%|####7     | 4631/9796 [00:00<00:00, 23161.72 examples/s]    Generating test_matched split:  71%|#######1  | 6980/9796 [00:00<00:00, 23311.27 examples/s]    Generating test_matched split:  95%|#########5| 9330/9796 [00:00<00:00, 23382.99 examples/s]                                                                                                Generating test_mismatched split:   0%|          | 0/9847 [00:00<?, ? examples/s]    Generating test_mismatched split:  23%|##3       | 2288/9847 [00:00<00:00, 22868.03 examples/s]    Generating test_mismatched split:  47%|####6     | 4616/9847 [00:00<00:00, 23103.55 examples/s]    Generating test_mismatched split:  71%|#######   | 6952/9847 [00:00<00:00, 23218.41 examples/s]    Generating test_mismatched split:  94%|#########4| 9281/9847 [00:00<00:00, 23240.92 examples/s]                                                                                                   Dataset glue downloaded and prepared to /home/nni-test/nni/examples/tutorials/data/glue/mnli/1.0.0/dacbe3125aa31d7f70367a07a8a9e72a5a0bfeb5fc42e75c9db75b96da6053ad. Subsequent calls will reuse this data.
      0%|          | 0/5 [00:00<?, ?it/s]    100%|##########| 5/5 [00:00<00:00, 1039.58it/s]
      0%|          | 0/393 [00:00<?, ?ba/s]      1%|          | 3/393 [00:00<00:16, 24.05ba/s]      2%|1         | 6/393 [00:00<00:25, 15.25ba/s]      2%|2         | 9/393 [00:00<00:20, 18.47ba/s]      3%|3         | 12/393 [00:00<00:18, 20.62ba/s]      4%|3         | 15/393 [00:00<00:17, 22.07ba/s]      5%|4         | 18/393 [00:00<00:16, 23.14ba/s]      5%|5         | 21/393 [00:00<00:15, 23.80ba/s]      6%|6         | 24/393 [00:01<00:15, 24.26ba/s]      7%|6         | 27/393 [00:01<00:14, 24.51ba/s]      8%|7         | 30/393 [00:01<00:19, 18.18ba/s]      8%|8         | 33/393 [00:01<00:18, 19.65ba/s]      9%|9         | 36/393 [00:01<00:17, 20.87ba/s]     10%|9         | 39/393 [00:01<00:16, 21.81ba/s]     11%|#         | 42/393 [00:01<00:15, 22.40ba/s]     11%|#1        | 45/393 [00:02<00:15, 22.93ba/s]     12%|#2        | 48/393 [00:02<00:14, 23.28ba/s]     13%|#2        | 51/393 [00:02<00:14, 23.69ba/s]     14%|#3        | 54/393 [00:02<00:18, 18.36ba/s]     15%|#4        | 57/393 [00:02<00:16, 19.94ba/s]     15%|#5        | 60/393 [00:02<00:15, 21.11ba/s]     16%|#6        | 63/393 [00:02<00:15, 21.96ba/s]     17%|#6        | 66/393 [00:03<00:14, 22.54ba/s]     18%|#7        | 69/393 [00:03<00:14, 23.14ba/s]     18%|#8        | 72/393 [00:03<00:13, 23.53ba/s]     19%|#9        | 75/393 [00:03<00:13, 23.88ba/s]     20%|#9        | 78/393 [00:03<00:13, 24.06ba/s]     21%|##        | 81/393 [00:03<00:16, 18.65ba/s]     21%|##1       | 84/393 [00:03<00:15, 20.19ba/s]     22%|##2       | 87/393 [00:04<00:14, 21.50ba/s]     23%|##2       | 90/393 [00:04<00:13, 22.33ba/s]     24%|##3       | 93/393 [00:04<00:12, 23.18ba/s]     24%|##4       | 96/393 [00:04<00:12, 23.72ba/s]     25%|##5       | 99/393 [00:04<00:12, 24.07ba/s]     26%|##5       | 102/393 [00:04<00:11, 24.25ba/s]     27%|##6       | 105/393 [00:04<00:15, 18.57ba/s]     27%|##7       | 108/393 [00:05<00:14, 19.96ba/s]     28%|##8       | 111/393 [00:05<00:13, 21.15ba/s]     29%|##9       | 114/393 [00:05<00:12, 21.97ba/s]     30%|##9       | 117/393 [00:05<00:12, 22.63ba/s]     31%|###       | 120/393 [00:05<00:11, 23.21ba/s]     31%|###1      | 123/393 [00:05<00:11, 23.56ba/s]     32%|###2      | 126/393 [00:05<00:11, 23.91ba/s]     33%|###2      | 129/393 [00:06<00:14, 18.37ba/s]     34%|###3      | 132/393 [00:06<00:13, 19.88ba/s]     34%|###4      | 135/393 [00:06<00:12, 21.13ba/s]     35%|###5      | 138/393 [00:06<00:11, 21.94ba/s]     36%|###5      | 141/393 [00:06<00:11, 22.73ba/s]     37%|###6      | 144/393 [00:06<00:10, 23.34ba/s]     37%|###7      | 147/393 [00:06<00:10, 23.81ba/s]     38%|###8      | 150/393 [00:06<00:10, 24.10ba/s]     39%|###8      | 153/393 [00:07<00:12, 18.62ba/s]     40%|###9      | 156/393 [00:07<00:11, 20.09ba/s]     40%|####      | 159/393 [00:07<00:10, 21.33ba/s]     41%|####1     | 162/393 [00:07<00:10, 22.25ba/s]     42%|####1     | 165/393 [00:07<00:09, 23.07ba/s]     43%|####2     | 168/393 [00:07<00:09, 23.67ba/s]     44%|####3     | 171/393 [00:07<00:09, 24.02ba/s]     44%|####4     | 174/393 [00:07<00:09, 24.29ba/s]     45%|####5     | 177/393 [00:08<00:11, 18.69ba/s]     46%|####5     | 180/393 [00:08<00:10, 20.04ba/s]     47%|####6     | 183/393 [00:08<00:09, 21.19ba/s]     47%|####7     | 186/393 [00:08<00:09, 22.12ba/s]     48%|####8     | 189/393 [00:08<00:08, 22.80ba/s]     49%|####8     | 192/393 [00:08<00:08, 23.37ba/s]     50%|####9     | 195/393 [00:08<00:08, 23.84ba/s]     50%|#####     | 198/393 [00:09<00:08, 24.11ba/s]     51%|#####1    | 201/393 [00:09<00:10, 18.61ba/s]     52%|#####1    | 204/393 [00:09<00:09, 20.07ba/s]     53%|#####2    | 207/393 [00:09<00:08, 21.21ba/s]     53%|#####3    | 210/393 [00:09<00:08, 22.00ba/s]     54%|#####4    | 213/393 [00:09<00:07, 22.79ba/s]     55%|#####4    | 216/393 [00:09<00:07, 23.19ba/s]     56%|#####5    | 219/393 [00:10<00:07, 23.55ba/s]     56%|#####6    | 222/393 [00:10<00:07, 23.67ba/s]     57%|#####7    | 225/393 [00:10<00:09, 17.83ba/s]     58%|#####8    | 228/393 [00:10<00:08, 19.28ba/s]     59%|#####8    | 231/393 [00:10<00:07, 20.43ba/s]     60%|#####9    | 234/393 [00:10<00:07, 21.27ba/s]     60%|######    | 237/393 [00:10<00:07, 22.08ba/s]     61%|######1   | 240/393 [00:11<00:06, 22.61ba/s]     62%|######1   | 243/393 [00:11<00:06, 22.98ba/s]     63%|######2   | 246/393 [00:11<00:06, 23.16ba/s]     63%|######3   | 249/393 [00:11<00:08, 17.63ba/s]     64%|######4   | 252/393 [00:11<00:07, 19.24ba/s]     65%|######4   | 255/393 [00:11<00:06, 20.68ba/s]     66%|######5   | 258/393 [00:11<00:06, 21.62ba/s]     66%|######6   | 261/393 [00:12<00:05, 22.41ba/s]     67%|######7   | 264/393 [00:12<00:05, 22.82ba/s]     68%|######7   | 267/393 [00:12<00:05, 23.18ba/s]     69%|######8   | 270/393 [00:12<00:05, 23.43ba/s]     69%|######9   | 273/393 [00:12<00:06, 18.05ba/s]     70%|#######   | 276/393 [00:12<00:05, 19.56ba/s]     71%|#######   | 279/393 [00:12<00:05, 20.92ba/s]     72%|#######1  | 282/393 [00:13<00:05, 22.00ba/s]     73%|#######2  | 285/393 [00:13<00:04, 22.82ba/s]     73%|#######3  | 288/393 [00:13<00:04, 23.53ba/s]     74%|#######4  | 291/393 [00:13<00:04, 23.82ba/s]     75%|#######4  | 294/393 [00:13<00:04, 23.89ba/s]     76%|#######5  | 297/393 [00:13<00:05, 18.18ba/s]     76%|#######6  | 300/393 [00:13<00:04, 19.75ba/s]     77%|#######7  | 303/393 [00:14<00:04, 21.06ba/s]     78%|#######7  | 306/393 [00:14<00:03, 21.96ba/s]     79%|#######8  | 309/393 [00:14<00:03, 22.75ba/s]     79%|#######9  | 312/393 [00:14<00:03, 23.47ba/s]     80%|########  | 315/393 [00:14<00:03, 23.86ba/s]     81%|########  | 318/393 [00:14<00:03, 24.12ba/s]     82%|########1 | 321/393 [00:14<00:03, 18.57ba/s]     82%|########2 | 324/393 [00:15<00:03, 19.98ba/s]     83%|########3 | 327/393 [00:15<00:03, 21.08ba/s]     84%|########3 | 330/393 [00:15<00:02, 22.01ba/s]     85%|########4 | 333/393 [00:15<00:02, 22.71ba/s]     85%|########5 | 336/393 [00:15<00:02, 23.27ba/s]     86%|########6 | 339/393 [00:15<00:02, 23.56ba/s]     87%|########7 | 342/393 [00:15<00:02, 23.75ba/s]     88%|########7 | 345/393 [00:16<00:02, 18.09ba/s]     89%|########8 | 348/393 [00:16<00:02, 19.65ba/s]     89%|########9 | 351/393 [00:16<00:02, 20.92ba/s]     90%|######### | 354/393 [00:16<00:01, 21.92ba/s]     91%|######### | 357/393 [00:16<00:01, 22.59ba/s]     92%|#########1| 360/393 [00:16<00:01, 23.16ba/s]     92%|#########2| 363/393 [00:16<00:01, 23.52ba/s]     93%|#########3| 366/393 [00:16<00:01, 23.71ba/s]     94%|#########3| 369/393 [00:17<00:01, 18.39ba/s]     95%|#########4| 372/393 [00:17<00:01, 19.93ba/s]     95%|#########5| 375/393 [00:17<00:00, 21.17ba/s]     96%|#########6| 378/393 [00:17<00:00, 22.14ba/s]     97%|#########6| 381/393 [00:17<00:00, 23.00ba/s]     98%|#########7| 384/393 [00:17<00:00, 23.51ba/s]     98%|#########8| 387/393 [00:17<00:00, 23.70ba/s]     99%|#########9| 390/393 [00:17<00:00, 23.77ba/s]    100%|#########9| 392/393 [00:18<00:00, 21.52ba/s]
      0%|          | 0/10 [00:00<?, ?ba/s]     30%|###       | 3/10 [00:00<00:00, 23.06ba/s]     60%|######    | 6/10 [00:00<00:00, 23.56ba/s]     90%|######### | 9/10 [00:00<00:00, 23.88ba/s]     90%|######### | 9/10 [00:00<00:00, 21.77ba/s]
      0%|          | 0/10 [00:00<?, ?ba/s]     30%|###       | 3/10 [00:00<00:00, 23.22ba/s]     60%|######    | 6/10 [00:00<00:00, 23.94ba/s]     90%|######### | 9/10 [00:00<00:00, 24.26ba/s]     90%|######### | 9/10 [00:00<00:00, 21.99ba/s]




.. GENERATED FROM PYTHON SOURCE LINES 153-154

Training function & evaluation function.

.. GENERATED FROM PYTHON SOURCE LINES 154-277

.. code-block:: default


    import functools
    import time

    import torch.nn.functional as F
    from datasets import load_metric
    from transformers.modeling_outputs import SequenceClassifierOutput


    def training(model: torch.nn.Module,
                 optimizer: torch.optim.Optimizer,
                 criterion: Callable[[torch.Tensor, torch.Tensor], torch.Tensor],
                 lr_scheduler: torch.optim.lr_scheduler._LRScheduler = None,
                 max_steps: int = None,
                 max_epochs: int = None,
                 train_dataloader: DataLoader = None,
                 distillation: bool = False,
                 teacher_model: torch.nn.Module = None,
                 distil_func: Callable = None,
                 log_path: str = Path(log_dir) / 'training.log',
                 save_best_model: bool = False,
                 save_path: str = None,
                 evaluation_func: Callable = None,
                 eval_per_steps: int = 1000,
                 device=None):

        assert train_dataloader is not None

        model.train()
        if teacher_model is not None:
            teacher_model.eval()
        current_step = 0
        best_result = 0

        total_epochs = max_steps // len(train_dataloader) + 1 if max_steps else max_epochs if max_epochs else 3
        total_steps = max_steps if max_steps else total_epochs * len(train_dataloader)

        print(f'Training {total_epochs} epochs, {total_steps} steps...')

        for current_epoch in range(total_epochs):
            for batch in train_dataloader:
                if current_step >= total_steps:
                    return
                batch.to(device)
                outputs = model(**batch)
                loss = outputs.loss

                if distillation:
                    assert teacher_model is not None
                    with torch.no_grad():
                        teacher_outputs = teacher_model(**batch)
                    distil_loss = distil_func(outputs, teacher_outputs)
                    loss = 0.1 * loss + 0.9 * distil_loss

                loss = criterion(loss, None)
                optimizer.zero_grad()
                loss.backward()
                optimizer.step()

                # per step schedule
                if lr_scheduler:
                    lr_scheduler.step()

                current_step += 1

                if current_step % eval_per_steps == 0 or current_step % len(train_dataloader) == 0:
                    result = evaluation_func(model) if evaluation_func else None
                    with (log_path).open('a+') as f:
                        msg = '[{}] Epoch {}, Step {}: {}\n'.format(time.asctime(time.localtime(time.time())), current_epoch, current_step, result)
                        f.write(msg)
                    # if it's the best model, save it.
                    if save_best_model and (result is None or best_result < result['default']):
                        assert save_path is not None
                        torch.save(model.state_dict(), save_path)
                        best_result = None if result is None else result['default']


    def distil_loss_func(stu_outputs: SequenceClassifierOutput, tea_outputs: SequenceClassifierOutput, encoder_layer_idxs=[]):
        encoder_hidden_state_loss = []
        for i, idx in enumerate(encoder_layer_idxs[:-1]):
            encoder_hidden_state_loss.append(F.mse_loss(stu_outputs.hidden_states[i], tea_outputs.hidden_states[idx]))
        logits_loss = F.kl_div(F.log_softmax(stu_outputs.logits / 2, dim=-1), F.softmax(tea_outputs.logits / 2, dim=-1), reduction='batchmean') * (2 ** 2)

        distil_loss = 0
        for loss in encoder_hidden_state_loss:
            distil_loss += loss
        distil_loss += logits_loss
        return distil_loss


    def evaluation(model: torch.nn.Module, validation_dataloaders: Dict[str, DataLoader] = None, device=None):
        assert validation_dataloaders is not None
        training = model.training
        model.eval()

        is_regression = task_name == 'stsb'
        metric = load_metric('glue', task_name)

        result = {}
        default_result = 0
        for val_name, validation_dataloader in validation_dataloaders.items():
            for batch in validation_dataloader:
                batch.to(device)
                outputs = model(**batch)
                predictions = outputs.logits.argmax(dim=-1) if not is_regression else outputs.logits.squeeze()
                metric.add_batch(
                    predictions=predictions,
                    references=batch['labels'],
                )
            result[val_name] = metric.compute()
            default_result += result[val_name].get('f1', result[val_name].get('accuracy', 0))
        result['default'] = default_result / len(result)

        model.train(training)
        return result


    evaluation_func = functools.partial(evaluation, validation_dataloaders=validation_dataloaders, device=device)


    def fake_criterion(loss, _):
        return loss








.. GENERATED FROM PYTHON SOURCE LINES 278-279

Prepare pre-trained model and finetuning on downstream task.

.. GENERATED FROM PYTHON SOURCE LINES 279-319

.. code-block:: default


    from torch.optim import Adam
    from torch.optim.lr_scheduler import LambdaLR
    from transformers import BertForSequenceClassification


    def create_pretrained_model():
        is_regression = task_name == 'stsb'
        num_labels = 1 if is_regression else (3 if task_name == 'mnli' else 2)
        model = BertForSequenceClassification.from_pretrained(pretrained_model_name_or_path, num_labels=num_labels)
        model.bert.config.output_hidden_states = True
        return model


    def create_finetuned_model():
        finetuned_model = create_pretrained_model().to(device)
        finetuned_model_state_path = Path(model_dir) / 'finetuned_model_state.pth'

        if finetuned_model_state_path.exists():
            finetuned_model.load_state_dict(torch.load(finetuned_model_state_path, map_location=device))
        elif dev_mode:
            pass
        else:
            steps_per_epoch = len(train_dataloader)
            training_epochs = 3
            optimizer = Adam(finetuned_model.parameters(), lr=3e-5, eps=1e-8)

            def lr_lambda(current_step: int):
                return max(0.0, float(training_epochs * steps_per_epoch - current_step) / float(training_epochs * steps_per_epoch))

            lr_scheduler = LambdaLR(optimizer, lr_lambda)
            training(finetuned_model, optimizer, fake_criterion, lr_scheduler=lr_scheduler,
                     max_epochs=training_epochs, train_dataloader=train_dataloader, log_path=log_dir / 'finetuning_on_downstream.log',
                     save_best_model=True, save_path=finetuned_model_state_path, evaluation_func=evaluation_func, device=device)
        return finetuned_model


    finetuned_model = create_finetuned_model()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading:   0%|          | 0.00/440M [00:00<?, ?B/s]    Downloading:   0%|          | 64.5k/440M [00:00<11:29, 639kB/s]    Downloading:   0%|          | 212k/440M [00:00<06:58, 1.05MB/s]    Downloading:   0%|          | 556k/440M [00:00<03:31, 2.08MB/s]    Downloading:   0%|          | 916k/440M [00:00<02:45, 2.66MB/s]    Downloading:   0%|          | 1.26M/440M [00:00<02:30, 2.91MB/s]    Downloading:   0%|          | 1.67M/440M [00:00<02:12, 3.30MB/s]    Downloading:   0%|          | 2.06M/440M [00:00<02:05, 3.50MB/s]    Downloading:   1%|          | 2.52M/440M [00:00<01:54, 3.83MB/s]    Downloading:   1%|          | 3.03M/440M [00:00<01:44, 4.20MB/s]    Downloading:   1%|          | 3.50M/440M [00:01<01:40, 4.36MB/s]    Downloading:   1%|          | 4.08M/440M [00:01<01:31, 4.76MB/s]    Downloading:   1%|1         | 4.67M/440M [00:01<01:26, 5.04MB/s]    Downloading:   1%|1         | 5.31M/440M [00:01<01:20, 5.44MB/s]    Downloading:   1%|1         | 6.01M/440M [00:01<01:13, 5.88MB/s]    Downloading:   2%|1         | 6.69M/440M [00:01<01:10, 6.15MB/s]    Downloading:   2%|1         | 7.49M/440M [00:01<01:04, 6.69MB/s]    Downloading:   2%|1         | 8.31M/440M [00:01<01:00, 7.10MB/s]    Downloading:   2%|2         | 9.20M/440M [00:01<00:56, 7.61MB/s]    Downloading:   2%|2         | 10.2M/440M [00:01<00:52, 8.21MB/s]    Downloading:   3%|2         | 11.1M/440M [00:02<00:49, 8.60MB/s]    Downloading:   3%|2         | 12.2M/440M [00:02<00:46, 9.29MB/s]    Downloading:   3%|3         | 13.4M/440M [00:02<00:42, 10.0MB/s]    Downloading:   3%|3         | 14.6M/440M [00:02<00:40, 10.6MB/s]    Downloading:   4%|3         | 16.0M/440M [00:02<00:37, 11.4MB/s]    Downloading:   4%|3         | 17.3M/440M [00:02<00:34, 12.1MB/s]    Downloading:   4%|4         | 18.9M/440M [00:02<00:32, 13.0MB/s]    Downloading:   5%|4         | 20.5M/440M [00:02<00:30, 14.0MB/s]    Downloading:   5%|5         | 22.2M/440M [00:02<00:28, 14.7MB/s]    Downloading:   5%|5         | 24.1M/440M [00:02<00:25, 16.1MB/s]    Downloading:   6%|5         | 26.1M/440M [00:03<00:24, 16.9MB/s]    Downloading:   6%|6         | 28.2M/440M [00:03<00:22, 18.2MB/s]    Downloading:   7%|6         | 30.6M/440M [00:03<00:20, 19.8MB/s]    Downloading:   7%|7         | 32.8M/440M [00:03<00:19, 20.6MB/s]    Downloading:   8%|8         | 35.5M/440M [00:03<00:18, 22.4MB/s]    Downloading:   9%|8         | 38.3M/440M [00:03<00:16, 24.1MB/s]    Downloading:   9%|9         | 41.1M/440M [00:03<00:15, 25.2MB/s]    Downloading:  10%|#         | 44.4M/440M [00:03<00:14, 27.4MB/s]    Downloading:  11%|#         | 47.6M/440M [00:03<00:13, 28.9MB/s]    Downloading:  12%|#1        | 51.3M/440M [00:03<00:12, 31.1MB/s]    Downloading:  13%|#2        | 55.3M/440M [00:04<00:11, 33.7MB/s]    Downloading:  13%|#3        | 59.2M/440M [00:04<00:10, 35.3MB/s]    Downloading:  14%|#4        | 63.6M/440M [00:04<00:09, 37.8MB/s]    Downloading:  15%|#5        | 67.8M/440M [00:04<00:09, 39.4MB/s]    Downloading:  16%|#6        | 72.0M/440M [00:04<00:09, 40.0MB/s]    Downloading:  17%|#7        | 76.5M/440M [00:04<00:08, 41.4MB/s]    Downloading:  18%|#8        | 80.6M/440M [00:04<00:08, 41.1MB/s]    Downloading:  19%|#9        | 85.0M/440M [00:04<00:08, 42.0MB/s]    Downloading:  20%|##        | 89.4M/440M [00:04<00:08, 42.5MB/s]    Downloading:  21%|##1       | 93.6M/440M [00:04<00:08, 41.8MB/s]    Downloading:  22%|##2       | 98.1M/440M [00:05<00:08, 42.7MB/s]    Downloading:  23%|##3       | 102M/440M [00:05<00:08, 41.9MB/s]     Downloading:  24%|##4       | 107M/440M [00:05<00:07, 42.8MB/s]    Downloading:  25%|##5       | 111M/440M [00:05<00:07, 42.6MB/s]    Downloading:  26%|##6       | 115M/440M [00:05<00:07, 42.1MB/s]    Downloading:  27%|##7       | 120M/440M [00:05<00:07, 43.3MB/s]    Downloading:  28%|##8       | 124M/440M [00:05<00:07, 41.9MB/s]    Downloading:  29%|##9       | 129M/440M [00:05<00:07, 43.0MB/s]    Downloading:  30%|###       | 133M/440M [00:05<00:07, 42.3MB/s]    Downloading:  31%|###1      | 138M/440M [00:05<00:07, 42.5MB/s]    Downloading:  32%|###2      | 142M/440M [00:06<00:06, 43.4MB/s]    Downloading:  33%|###3      | 146M/440M [00:06<00:06, 42.0MB/s]    Downloading:  34%|###4      | 151M/440M [00:06<00:06, 43.1MB/s]    Downloading:  35%|###5      | 155M/440M [00:06<00:06, 41.8MB/s]    Downloading:  36%|###6      | 160M/440M [00:06<00:06, 42.9MB/s]    Downloading:  37%|###7      | 164M/440M [00:06<00:06, 42.9MB/s]    Downloading:  38%|###8      | 169M/440M [00:06<00:06, 42.2MB/s]    Downloading:  39%|###9      | 173M/440M [00:06<00:06, 43.3MB/s]    Downloading:  40%|####      | 178M/440M [00:06<00:06, 41.7MB/s]    Downloading:  41%|####1     | 182M/440M [00:07<00:06, 42.9MB/s]    Downloading:  42%|####2     | 186M/440M [00:07<00:06, 41.8MB/s]    Downloading:  43%|####3     | 191M/440M [00:07<00:05, 42.6MB/s]    Downloading:  44%|####4     | 195M/440M [00:07<00:05, 43.6MB/s]    Downloading:  45%|####5     | 200M/440M [00:07<00:05, 41.9MB/s]    Downloading:  46%|####6     | 204M/440M [00:07<00:05, 43.1MB/s]    Downloading:  47%|####7     | 209M/440M [00:07<00:05, 41.5MB/s]    Downloading:  48%|####8     | 213M/440M [00:07<00:05, 42.8MB/s]    Downloading:  49%|####9     | 218M/440M [00:07<00:05, 42.3MB/s]    Downloading:  50%|#####     | 222M/440M [00:07<00:05, 42.1MB/s]    Downloading:  51%|#####1    | 227M/440M [00:08<00:04, 43.3MB/s]    Downloading:  52%|#####2    | 231M/440M [00:08<00:05, 41.7MB/s]    Downloading:  53%|#####3    | 235M/440M [00:08<00:04, 43.0MB/s]    Downloading:  54%|#####4    | 240M/440M [00:08<00:04, 41.8MB/s]    Downloading:  55%|#####5    | 244M/440M [00:08<00:04, 42.7MB/s]    Downloading:  56%|#####6    | 249M/440M [00:08<00:04, 43.3MB/s]    Downloading:  57%|#####7    | 253M/440M [00:08<00:04, 42.1MB/s]    Downloading:  59%|#####8    | 258M/440M [00:08<00:04, 43.2MB/s]    Downloading:  60%|#####9    | 262M/440M [00:08<00:04, 41.7MB/s]    Downloading:  61%|######    | 267M/440M [00:09<00:04, 42.9MB/s]    Downloading:  62%|######1   | 271M/440M [00:09<00:04, 42.3MB/s]    Downloading:  63%|######2   | 275M/440M [00:09<00:03, 42.3MB/s]    Downloading:  64%|######3   | 280M/440M [00:09<00:03, 43.1MB/s]    Downloading:  65%|######4   | 284M/440M [00:09<00:03, 41.8MB/s]    Downloading:  66%|######5   | 289M/440M [00:09<00:03, 43.0MB/s]    Downloading:  67%|######6   | 293M/440M [00:09<00:03, 42.1MB/s]    Downloading:  68%|######7   | 297M/440M [00:09<00:03, 42.5MB/s]    Downloading:  69%|######8   | 302M/440M [00:09<00:03, 43.4MB/s]    Downloading:  70%|######9   | 306M/440M [00:09<00:03, 42.0MB/s]    Downloading:  71%|#######   | 311M/440M [00:10<00:03, 43.0MB/s]    Downloading:  72%|#######1  | 315M/440M [00:10<00:02, 41.8MB/s]    Downloading:  73%|#######2  | 320M/440M [00:10<00:02, 43.0MB/s]    Downloading:  74%|#######3  | 324M/440M [00:10<00:02, 43.1MB/s]    Downloading:  75%|#######4  | 328M/440M [00:10<00:02, 42.2MB/s]    Downloading:  76%|#######5  | 333M/440M [00:10<00:02, 43.3MB/s]    Downloading:  77%|#######6  | 337M/440M [00:10<00:02, 41.8MB/s]    Downloading:  78%|#######7  | 342M/440M [00:10<00:02, 43.0MB/s]    Downloading:  79%|#######8  | 346M/440M [00:10<00:02, 41.6MB/s]    Downloading:  80%|#######9  | 351M/440M [00:11<00:02, 42.8MB/s]    Downloading:  81%|########  | 355M/440M [00:11<00:01, 43.3MB/s]    Downloading:  82%|########1 | 360M/440M [00:11<00:01, 42.1MB/s]    Downloading:  83%|########2 | 364M/440M [00:11<00:01, 43.1MB/s]    Downloading:  84%|########3 | 369M/440M [00:11<00:01, 41.8MB/s]    Downloading:  85%|########4 | 373M/440M [00:11<00:01, 42.9MB/s]    Downloading:  86%|########5 | 378M/440M [00:11<00:01, 42.0MB/s]    Downloading:  87%|########6 | 382M/440M [00:11<00:01, 42.5MB/s]    Downloading:  88%|########7 | 387M/440M [00:11<00:01, 43.5MB/s]    Downloading:  89%|########8 | 391M/440M [00:11<00:01, 41.9MB/s]    Downloading:  90%|########9 | 395M/440M [00:12<00:01, 43.0MB/s]    Downloading:  91%|######### | 400M/440M [00:12<00:00, 41.7MB/s]    Downloading:  92%|#########1| 404M/440M [00:12<00:00, 42.8MB/s]    Downloading:  93%|#########2| 409M/440M [00:12<00:00, 43.2MB/s]    Downloading:  94%|#########3| 413M/440M [00:12<00:00, 42.2MB/s]    Downloading:  95%|#########4| 418M/440M [00:12<00:00, 43.2MB/s]    Downloading:  96%|#########5| 422M/440M [00:12<00:00, 41.8MB/s]    Downloading:  97%|#########6| 427M/440M [00:12<00:00, 42.8MB/s]    Downloading:  98%|#########7| 431M/440M [00:12<00:00, 42.2MB/s]    Downloading:  99%|#########8| 435M/440M [00:12<00:00, 42.3MB/s]    Downloading: 100%|#########9| 440M/440M [00:13<00:00, 43.3MB/s]    Downloading: 100%|##########| 440M/440M [00:13<00:00, 33.6MB/s]
    Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForSequenceClassification: ['cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.weight', 'cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight']
    - This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
    - This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
    Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']
    You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.




.. GENERATED FROM PYTHON SOURCE LINES 320-327

Pruning
^^^^^^^
According to experience, it is easier to achieve good results by pruning the attention part and the FFN part in stages.
Of course, pruning together can also achieve the similar effect, but more parameter adjustment attempts are required.
So in this section, we do pruning in stages.

First, we prune the attention layer with MovementPruner.

.. GENERATED FROM PYTHON SOURCE LINES 327-387

.. code-block:: default


    steps_per_epoch = len(train_dataloader)

    # Set training steps/epochs for pruning.

    if not dev_mode:
        total_epochs = 4
        total_steps = total_epochs * steps_per_epoch
        warmup_steps = 1 * steps_per_epoch
        cooldown_steps = 1 * steps_per_epoch
    else:
        total_epochs = 1
        total_steps = 3
        warmup_steps = 1
        cooldown_steps = 1

    # Initialize evaluator used by MovementPruner.

    import nni
    from nni.compression.pytorch import TorchEvaluator

    movement_training = functools.partial(training, train_dataloader=train_dataloader,
                                          log_path=log_dir / 'movement_pruning.log',
                                          evaluation_func=evaluation_func, device=device)
    traced_optimizer = nni.trace(Adam)(finetuned_model.parameters(), lr=3e-5, eps=1e-8)

    def lr_lambda(current_step: int):
        if current_step < warmup_steps:
            return float(current_step) / warmup_steps
        return max(0.0, float(total_steps - current_step) / float(total_steps - warmup_steps))

    traced_scheduler = nni.trace(LambdaLR)(traced_optimizer, lr_lambda)
    evaluator = TorchEvaluator(movement_training, traced_optimizer, fake_criterion, traced_scheduler)

    # Apply block-soft-movement pruning on attention layers.
    # Note that block sparse is introduced by `sparse_granularity='auto'`, and only support `bert`, `bart`, `t5` right now.

    from nni.compression.pytorch.pruning import MovementPruner

    config_list = [{
        'op_types': ['Linear'],
        'op_partial_names': ['bert.encoder.layer.{}.attention'.format(i) for i in range(layers_num)],
        'sparsity': 0.1
    }]

    pruner = MovementPruner(model=finetuned_model,
                            config_list=config_list,
                            evaluator=evaluator,
                            training_epochs=total_epochs,
                            training_steps=total_steps,
                            warm_up_step=warmup_steps,
                            cool_down_beginning_step=total_steps - cooldown_steps,
                            regular_scale=10,
                            movement_mode='soft',
                            sparse_granularity='auto')
    _, attention_masks = pruner.compress()
    pruner.show_pruned_weights()

    torch.save(attention_masks, Path(log_dir) / 'attention_masks.pth')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Did not bind any model, no need to unbind model.
    Training 1 epochs, 3 steps...
    You're using a BertTokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.
    /home/nni-test/ENTER/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:122: UserWarning: Seems like `optimizer.step()` has been overridden after learning rate scheduler initialization. Please, make sure to call `optimizer.step()` before `lr_scheduler.step()`. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
      warnings.warn("Seems like `optimizer.step()` has been overridden after learning rate scheduler "
    Did not bind any model, no need to unbind model.




.. GENERATED FROM PYTHON SOURCE LINES 388-392

Load a new finetuned model to do speedup, you can think of this as using the finetuned state to initialize the pruned model weights.
Note that nni speedup don't support replacing attention module, so here we manully replace the attention module.

If the head is entire masked, physically prune it and create config_list for FFN pruning.

.. GENERATED FROM PYTHON SOURCE LINES 392-422

.. code-block:: default


    attention_pruned_model = create_finetuned_model().to(device)
    attention_masks = torch.load(Path(log_dir) / 'attention_masks.pth')

    ffn_config_list = []
    layer_remained_idxs = []
    module_list = []
    for i in range(0, layers_num):
        prefix = f'bert.encoder.layer.{i}.'
        value_mask: torch.Tensor = attention_masks[prefix + 'attention.self.value']['weight']
        head_mask = (value_mask.reshape(heads_num, -1).sum(-1) == 0.)
        head_idxs = torch.arange(len(head_mask))[head_mask].long().tolist()
        print(f'layer {i} prune {len(head_idxs)} head: {head_idxs}')
        if len(head_idxs) != heads_num:
            attention_pruned_model.bert.encoder.layer[i].attention.prune_heads(head_idxs)
            module_list.append(attention_pruned_model.bert.encoder.layer[i])
            # The final ffn weight remaining ratio is the half of the attention weight remaining ratio.
            # This is just an empirical configuration, you can use any other method to determine this sparsity.
            sparsity = 1 - (1 - len(head_idxs) / heads_num) * 0.5
            # here we use a simple sparsity schedule, we will prune ffn in 12 iterations, each iteration prune `sparsity_per_iter`.
            sparsity_per_iter = 1 - (1 - sparsity) ** (1 / 12)
            ffn_config_list.append({
                'op_names': [f'bert.encoder.layer.{len(layer_remained_idxs)}.intermediate.dense'],
                'sparsity': sparsity_per_iter
            })
            layer_remained_idxs.append(i)

    attention_pruned_model.bert.encoder.layer = torch.nn.ModuleList(module_list)
    distil_func = functools.partial(distil_loss_func, encoder_layer_idxs=layer_remained_idxs)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForSequenceClassification: ['cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.weight', 'cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight']
    - This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
    - This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
    Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']
    You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
    layer 0 prune 0 head: []
    layer 1 prune 0 head: []
    layer 2 prune 0 head: []
    layer 3 prune 0 head: []
    layer 4 prune 0 head: []
    layer 5 prune 0 head: []
    layer 6 prune 0 head: []
    layer 7 prune 0 head: []
    layer 8 prune 0 head: []
    layer 9 prune 0 head: []
    layer 10 prune 0 head: []
    layer 11 prune 0 head: []




.. GENERATED FROM PYTHON SOURCE LINES 423-424

Retrain the attention pruned model with distillation.

.. GENERATED FROM PYTHON SOURCE LINES 424-450

.. code-block:: default


    if not dev_mode:
        total_epochs = 5
        total_steps = None
        distillation = True
    else:
        total_epochs = 1
        total_steps = 1
        distillation = False

    teacher_model = create_finetuned_model()
    optimizer = Adam(attention_pruned_model.parameters(), lr=3e-5, eps=1e-8)

    def lr_lambda(current_step: int):
        return max(0.0, float(total_epochs * steps_per_epoch - current_step) / float(total_epochs * steps_per_epoch))

    lr_scheduler = LambdaLR(optimizer, lr_lambda)
    at_model_save_path = log_dir / 'attention_pruned_model_state.pth'
    training(attention_pruned_model, optimizer, fake_criterion, lr_scheduler=lr_scheduler, max_epochs=total_epochs,
             max_steps=total_steps, train_dataloader=train_dataloader, distillation=distillation, teacher_model=teacher_model,
             distil_func=distil_func, log_path=log_dir / 'retraining.log', save_best_model=True, save_path=at_model_save_path,
             evaluation_func=evaluation_func, device=device)

    if not dev_mode:
        attention_pruned_model.load_state_dict(torch.load(at_model_save_path))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForSequenceClassification: ['cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.weight', 'cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight']
    - This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
    - This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
    Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']
    You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
    Training 1 epochs, 1 steps...




.. GENERATED FROM PYTHON SOURCE LINES 451-455

Iterative pruning FFN with TaylorFOWeightPruner in 12 iterations.
Finetuning 3000 steps after each pruning iteration, then finetuning 2 epochs after pruning finished.

NNI will support per-step-pruning-schedule in the future, then can use an pruner to replace the following code.

.. GENERATED FROM PYTHON SOURCE LINES 455-536

.. code-block:: default


    if not dev_mode:
        total_epochs = 7
        total_steps = None
        taylor_pruner_steps = 1000
        steps_per_iteration = 3000
        total_pruning_steps = 36000
        distillation = True
    else:
        total_epochs = 1
        total_steps = 6
        taylor_pruner_steps = 2
        steps_per_iteration = 2
        total_pruning_steps = 4
        distillation = False

    from nni.compression.pytorch.pruning import TaylorFOWeightPruner
    from nni.compression.pytorch.speedup import ModelSpeedup

    distil_training = functools.partial(training, train_dataloader=train_dataloader, distillation=distillation,
                                        teacher_model=teacher_model, distil_func=distil_func, device=device)
    traced_optimizer = nni.trace(Adam)(attention_pruned_model.parameters(), lr=3e-5, eps=1e-8)
    evaluator = TorchEvaluator(distil_training, traced_optimizer, fake_criterion)

    current_step = 0
    best_result = 0
    init_lr = 3e-5

    dummy_input = torch.rand(8, 128, 768).to(device)

    attention_pruned_model.train()
    for current_epoch in range(total_epochs):
        for batch in train_dataloader:
            if total_steps and current_step >= total_steps:
                break
            # pruning with TaylorFOWeightPruner & reinitialize optimizer
            if current_step % steps_per_iteration == 0 and current_step < total_pruning_steps:
                check_point = attention_pruned_model.state_dict()
                pruner = TaylorFOWeightPruner(attention_pruned_model, ffn_config_list, evaluator, taylor_pruner_steps)
                _, ffn_masks = pruner.compress()
                renamed_ffn_masks = {}
                # rename the masks keys, because we only speedup the bert.encoder
                for model_name, targets_mask in ffn_masks.items():
                    renamed_ffn_masks[model_name.split('bert.encoder.')[1]] = targets_mask
                pruner._unwrap_model()
                attention_pruned_model.load_state_dict(check_point)
                ModelSpeedup(attention_pruned_model.bert.encoder, dummy_input, renamed_ffn_masks).speedup_model()
                optimizer = Adam(attention_pruned_model.parameters(), lr=init_lr)

            batch.to(device)
            # manually schedule lr
            for params_group in optimizer.param_groups:
                params_group['lr'] = (1 - current_step / (total_epochs * steps_per_epoch)) * init_lr

            outputs = attention_pruned_model(**batch)
            loss = outputs.loss

            # distillation
            if distillation:
                assert teacher_model is not None
                with torch.no_grad():
                    teacher_outputs = teacher_model(**batch)
                distil_loss = distil_func(outputs, teacher_outputs)
                loss = 0.1 * loss + 0.9 * distil_loss

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            current_step += 1

            if current_step % 1000 == 0 or current_step % len(train_dataloader) == 0:
                result = evaluation_func(attention_pruned_model)
                with (log_dir / 'ffn_pruning.log').open('a+') as f:
                    msg = '[{}] Epoch {}, Step {}: {}\n'.format(time.asctime(time.localtime(time.time())),
                                                                current_epoch, current_step, result)
                    f.write(msg)
                if current_step >= total_pruning_steps and best_result < result['default']:
                    torch.save(attention_pruned_model, log_dir / 'best_model.pth')
                    best_result = result['default']



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/nni-test/nni/examples/tutorials/pruning_bert_glue.py", line 501, in <module>
        ModelSpeedup(attention_pruned_model.bert.encoder, dummy_input, renamed_ffn_masks).speedup_model()
      File "/home/nni-test/nni/nni/compression/pytorch/speedup/compressor.py", line 546, in speedup_model
        self.infer_modules_masks()
      File "/home/nni-test/nni/nni/compression/pytorch/speedup/compressor.py", line 383, in infer_modules_masks
        self.update_direct_sparsity(curnode)
      File "/home/nni-test/nni/nni/compression/pytorch/speedup/compressor.py", line 250, in update_direct_sparsity
        _auto_infer.update_direct_sparsity()
      File "/home/nni-test/nni/nni/compression/pytorch/speedup/infer_mask.py", line 340, in update_direct_sparsity
        out_mask, constant = self.isconstants(out.clone().detach())
    RuntimeError: CUDA out of memory. Tried to allocate 12.00 MiB (GPU 0; 10.76 GiB total capacity; 8.92 GiB already allocated; 13.44 MiB free; 9.43 GiB reserved in total by PyTorch)




.. GENERATED FROM PYTHON SOURCE LINES 537-606

Result
------
The speedup is test on the entire validation dataset with batch size 128 on A100.
We test under two pytorch version and found the latency varying widely.

Setting 1: pytorch 1.12.1

Setting 2: pytorch 1.10.0

.. list-table:: Prune Bert-base-uncased on MNLI
    :header-rows: 1
    :widths: auto

    * - Attention Pruning Method
      - FFN Pruning Method
      - Total Sparsity
      - Accuracy
      - Acc. Drop
      - Speedup (S1)
      - Speedup (S2)
    * -
      -
      - 85.1M (-0.0%)
      - 84.85 / 85.28
      - +0.0 / +0.0
      - 25.60s (x1.00)
      - 8.10s (x1.00)
    * - :ref:`movement-pruner` (soft, sparsity=0.1, regular_scale=1)
      - :ref:`taylor-fo-weight-pruner`
      - 54.1M (-36.43%)
      - 85.38 / 85.41
      - +0.53 / +0.13
      - 17.93s (x1.43)
      - 7.22s (x1.12)
    * - :ref:`movement-pruner` (soft, sparsity=0.1, regular_scale=5)
      - :ref:`taylor-fo-weight-pruner`
      - 37.1M (-56.40%)
      - 84.73 / 85.12
      - -0.12 / -0.16
      - 12.83s (x2.00)
      - 5.61s (x1.44)
    * - :ref:`movement-pruner` (soft, sparsity=0.1, regular_scale=10)
      - :ref:`taylor-fo-weight-pruner`
      - 24.1M (-71.68%)
      - 84.14 / 84.78
      - -0.71 / -0.50
      - 8.93s (x2.87)
      - 4.55s (x1.78)
    * - :ref:`movement-pruner` (soft, sparsity=0.1, regular_scale=20)
      - :ref:`taylor-fo-weight-pruner`
      - 14.3M (-83.20%)
      - 83.26 / 82.96
      - -1.59 / -2.32
      - 5.98s (x4.28)
      - 3.56s (x2.28)
    * - :ref:`movement-pruner` (soft, sparsity=0.1, regular_scale=30)
      - :ref:`taylor-fo-weight-pruner`
      - 9.9M (-88.37%)
      - 82.22 / 82.19
      - -2.63 / -3.09
      - 4.36s (x5.88)
      - 3.12s (x2.60)
    * - :ref:`movement-pruner` (soft, sparsity=0.1, regular_scale=40)
      - :ref:`taylor-fo-weight-pruner`
      - 8.8M (-89.66%)
      - 81.64 / 82.39
      - -3.21 / -2.89
      - 3.88s (x6.60)
      - 2.81s (x2.88)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  1.829 seconds)


.. _sphx_glr_download_tutorials_pruning_bert_glue.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: pruning_bert_glue.py <pruning_bert_glue.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: pruning_bert_glue.ipynb <pruning_bert_glue.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
