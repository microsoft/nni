# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.
# This file is auto-generated to make auto-completion work.
# When pytorch version does not match, it will get automatically updated.
# pylint: skip-file
# pyright: reportGeneralTypeIssues=false
# _torch_version = 1.10.1
# _torch_nn_cache_version = 3
import typing
import torch.nn as nn
from nni.nas.utils import basic_unit
AdaptiveAvgPool1d = typing.cast(typing.Type[nn.AdaptiveAvgPool1d], basic_unit(nn.AdaptiveAvgPool1d))
AdaptiveAvgPool2d = typing.cast(typing.Type[nn.AdaptiveAvgPool2d], basic_unit(nn.AdaptiveAvgPool2d))
AdaptiveAvgPool3d = typing.cast(typing.Type[nn.AdaptiveAvgPool3d], basic_unit(nn.AdaptiveAvgPool3d))
AdaptiveLogSoftmaxWithLoss = typing.cast(typing.Type[nn.AdaptiveLogSoftmaxWithLoss], basic_unit(nn.AdaptiveLogSoftmaxWithLoss))
AdaptiveMaxPool1d = typing.cast(typing.Type[nn.AdaptiveMaxPool1d], basic_unit(nn.AdaptiveMaxPool1d))
AdaptiveMaxPool2d = typing.cast(typing.Type[nn.AdaptiveMaxPool2d], basic_unit(nn.AdaptiveMaxPool2d))
AdaptiveMaxPool3d = typing.cast(typing.Type[nn.AdaptiveMaxPool3d], basic_unit(nn.AdaptiveMaxPool3d))
AlphaDropout = typing.cast(typing.Type[nn.AlphaDropout], basic_unit(nn.AlphaDropout))
AvgPool1d = typing.cast(typing.Type[nn.AvgPool1d], basic_unit(nn.AvgPool1d))
AvgPool2d = typing.cast(typing.Type[nn.AvgPool2d], basic_unit(nn.AvgPool2d))
AvgPool3d = typing.cast(typing.Type[nn.AvgPool3d], basic_unit(nn.AvgPool3d))
BCELoss = typing.cast(typing.Type[nn.BCELoss], basic_unit(nn.BCELoss))
BCEWithLogitsLoss = typing.cast(typing.Type[nn.BCEWithLogitsLoss], basic_unit(nn.BCEWithLogitsLoss))
BatchNorm1d = typing.cast(typing.Type[nn.BatchNorm1d], basic_unit(nn.BatchNorm1d))
BatchNorm2d = typing.cast(typing.Type[nn.BatchNorm2d], basic_unit(nn.BatchNorm2d))
BatchNorm3d = typing.cast(typing.Type[nn.BatchNorm3d], basic_unit(nn.BatchNorm3d))
Bilinear = typing.cast(typing.Type[nn.Bilinear], basic_unit(nn.Bilinear))
CELU = typing.cast(typing.Type[nn.CELU], basic_unit(nn.CELU))
CTCLoss = typing.cast(typing.Type[nn.CTCLoss], basic_unit(nn.CTCLoss))
ChannelShuffle = typing.cast(typing.Type[nn.ChannelShuffle], basic_unit(nn.ChannelShuffle))
ConstantPad1d = typing.cast(typing.Type[nn.ConstantPad1d], basic_unit(nn.ConstantPad1d))
ConstantPad2d = typing.cast(typing.Type[nn.ConstantPad2d], basic_unit(nn.ConstantPad2d))
ConstantPad3d = typing.cast(typing.Type[nn.ConstantPad3d], basic_unit(nn.ConstantPad3d))
Container = nn.Container
Conv1d = typing.cast(typing.Type[nn.Conv1d], basic_unit(nn.Conv1d))
Conv2d = typing.cast(typing.Type[nn.Conv2d], basic_unit(nn.Conv2d))
Conv3d = typing.cast(typing.Type[nn.Conv3d], basic_unit(nn.Conv3d))
ConvTranspose1d = typing.cast(typing.Type[nn.ConvTranspose1d], basic_unit(nn.ConvTranspose1d))
ConvTranspose2d = typing.cast(typing.Type[nn.ConvTranspose2d], basic_unit(nn.ConvTranspose2d))
ConvTranspose3d = typing.cast(typing.Type[nn.ConvTranspose3d], basic_unit(nn.ConvTranspose3d))
CosineEmbeddingLoss = typing.cast(typing.Type[nn.CosineEmbeddingLoss], basic_unit(nn.CosineEmbeddingLoss))
CosineSimilarity = typing.cast(typing.Type[nn.CosineSimilarity], basic_unit(nn.CosineSimilarity))
CrossEntropyLoss = typing.cast(typing.Type[nn.CrossEntropyLoss], basic_unit(nn.CrossEntropyLoss))
CrossMapLRN2d = typing.cast(typing.Type[nn.CrossMapLRN2d], basic_unit(nn.CrossMapLRN2d))
DataParallel = nn.DataParallel
Dropout = typing.cast(typing.Type[nn.Dropout], basic_unit(nn.Dropout))
Dropout2d = typing.cast(typing.Type[nn.Dropout2d], basic_unit(nn.Dropout2d))
Dropout3d = typing.cast(typing.Type[nn.Dropout3d], basic_unit(nn.Dropout3d))
ELU = typing.cast(typing.Type[nn.ELU], basic_unit(nn.ELU))
Embedding = typing.cast(typing.Type[nn.Embedding], basic_unit(nn.Embedding))
EmbeddingBag = typing.cast(typing.Type[nn.EmbeddingBag], basic_unit(nn.EmbeddingBag))
FeatureAlphaDropout = typing.cast(typing.Type[nn.FeatureAlphaDropout], basic_unit(nn.FeatureAlphaDropout))
Flatten = typing.cast(typing.Type[nn.Flatten], basic_unit(nn.Flatten))
Fold = typing.cast(typing.Type[nn.Fold], basic_unit(nn.Fold))
FractionalMaxPool2d = typing.cast(typing.Type[nn.FractionalMaxPool2d], basic_unit(nn.FractionalMaxPool2d))
FractionalMaxPool3d = typing.cast(typing.Type[nn.FractionalMaxPool3d], basic_unit(nn.FractionalMaxPool3d))
GELU = typing.cast(typing.Type[nn.GELU], basic_unit(nn.GELU))
GLU = typing.cast(typing.Type[nn.GLU], basic_unit(nn.GLU))
GRU = typing.cast(typing.Type[nn.GRU], basic_unit(nn.GRU))
GRUCell = typing.cast(typing.Type[nn.GRUCell], basic_unit(nn.GRUCell))
GaussianNLLLoss = typing.cast(typing.Type[nn.GaussianNLLLoss], basic_unit(nn.GaussianNLLLoss))
GroupNorm = typing.cast(typing.Type[nn.GroupNorm], basic_unit(nn.GroupNorm))
Hardshrink = typing.cast(typing.Type[nn.Hardshrink], basic_unit(nn.Hardshrink))
Hardsigmoid = typing.cast(typing.Type[nn.Hardsigmoid], basic_unit(nn.Hardsigmoid))
Hardswish = typing.cast(typing.Type[nn.Hardswish], basic_unit(nn.Hardswish))
Hardtanh = typing.cast(typing.Type[nn.Hardtanh], basic_unit(nn.Hardtanh))
HingeEmbeddingLoss = typing.cast(typing.Type[nn.HingeEmbeddingLoss], basic_unit(nn.HingeEmbeddingLoss))
HuberLoss = typing.cast(typing.Type[nn.HuberLoss], basic_unit(nn.HuberLoss))
Identity = typing.cast(typing.Type[nn.Identity], basic_unit(nn.Identity))
InstanceNorm1d = typing.cast(typing.Type[nn.InstanceNorm1d], basic_unit(nn.InstanceNorm1d))
InstanceNorm2d = typing.cast(typing.Type[nn.InstanceNorm2d], basic_unit(nn.InstanceNorm2d))
InstanceNorm3d = typing.cast(typing.Type[nn.InstanceNorm3d], basic_unit(nn.InstanceNorm3d))
KLDivLoss = typing.cast(typing.Type[nn.KLDivLoss], basic_unit(nn.KLDivLoss))
L1Loss = typing.cast(typing.Type[nn.L1Loss], basic_unit(nn.L1Loss))
LPPool1d = typing.cast(typing.Type[nn.LPPool1d], basic_unit(nn.LPPool1d))
LPPool2d = typing.cast(typing.Type[nn.LPPool2d], basic_unit(nn.LPPool2d))
LSTM = typing.cast(typing.Type[nn.LSTM], basic_unit(nn.LSTM))
LSTMCell = typing.cast(typing.Type[nn.LSTMCell], basic_unit(nn.LSTMCell))
LayerNorm = typing.cast(typing.Type[nn.LayerNorm], basic_unit(nn.LayerNorm))
LazyBatchNorm1d = typing.cast(typing.Type[nn.LazyBatchNorm1d], basic_unit(nn.LazyBatchNorm1d))
LazyBatchNorm2d = typing.cast(typing.Type[nn.LazyBatchNorm2d], basic_unit(nn.LazyBatchNorm2d))
LazyBatchNorm3d = typing.cast(typing.Type[nn.LazyBatchNorm3d], basic_unit(nn.LazyBatchNorm3d))
LazyConv1d = typing.cast(typing.Type[nn.LazyConv1d], basic_unit(nn.LazyConv1d))
LazyConv2d = typing.cast(typing.Type[nn.LazyConv2d], basic_unit(nn.LazyConv2d))
LazyConv3d = typing.cast(typing.Type[nn.LazyConv3d], basic_unit(nn.LazyConv3d))
LazyConvTranspose1d = typing.cast(typing.Type[nn.LazyConvTranspose1d], basic_unit(nn.LazyConvTranspose1d))
LazyConvTranspose2d = typing.cast(typing.Type[nn.LazyConvTranspose2d], basic_unit(nn.LazyConvTranspose2d))
LazyConvTranspose3d = typing.cast(typing.Type[nn.LazyConvTranspose3d], basic_unit(nn.LazyConvTranspose3d))
LazyInstanceNorm1d = typing.cast(typing.Type[nn.LazyInstanceNorm1d], basic_unit(nn.LazyInstanceNorm1d))
LazyInstanceNorm2d = typing.cast(typing.Type[nn.LazyInstanceNorm2d], basic_unit(nn.LazyInstanceNorm2d))
LazyInstanceNorm3d = typing.cast(typing.Type[nn.LazyInstanceNorm3d], basic_unit(nn.LazyInstanceNorm3d))
LazyLinear = typing.cast(typing.Type[nn.LazyLinear], basic_unit(nn.LazyLinear))
LeakyReLU = typing.cast(typing.Type[nn.LeakyReLU], basic_unit(nn.LeakyReLU))
Linear = typing.cast(typing.Type[nn.Linear], basic_unit(nn.Linear))
LocalResponseNorm = typing.cast(typing.Type[nn.LocalResponseNorm], basic_unit(nn.LocalResponseNorm))
LogSigmoid = typing.cast(typing.Type[nn.LogSigmoid], basic_unit(nn.LogSigmoid))
LogSoftmax = typing.cast(typing.Type[nn.LogSoftmax], basic_unit(nn.LogSoftmax))
MSELoss = typing.cast(typing.Type[nn.MSELoss], basic_unit(nn.MSELoss))
MarginRankingLoss = typing.cast(typing.Type[nn.MarginRankingLoss], basic_unit(nn.MarginRankingLoss))
MaxPool1d = typing.cast(typing.Type[nn.MaxPool1d], basic_unit(nn.MaxPool1d))
MaxPool2d = typing.cast(typing.Type[nn.MaxPool2d], basic_unit(nn.MaxPool2d))
MaxPool3d = typing.cast(typing.Type[nn.MaxPool3d], basic_unit(nn.MaxPool3d))
MaxUnpool1d = typing.cast(typing.Type[nn.MaxUnpool1d], basic_unit(nn.MaxUnpool1d))
MaxUnpool2d = typing.cast(typing.Type[nn.MaxUnpool2d], basic_unit(nn.MaxUnpool2d))
MaxUnpool3d = typing.cast(typing.Type[nn.MaxUnpool3d], basic_unit(nn.MaxUnpool3d))
Mish = typing.cast(typing.Type[nn.Mish], basic_unit(nn.Mish))
Module = nn.Module
ModuleDict = typing.cast(typing.Type[nn.ModuleDict], basic_unit(nn.ModuleDict, basic_unit_tag=False))
ModuleList = typing.cast(typing.Type[nn.ModuleList], basic_unit(nn.ModuleList, basic_unit_tag=False))
MultiLabelMarginLoss = typing.cast(typing.Type[nn.MultiLabelMarginLoss], basic_unit(nn.MultiLabelMarginLoss))
MultiLabelSoftMarginLoss = typing.cast(typing.Type[nn.MultiLabelSoftMarginLoss], basic_unit(nn.MultiLabelSoftMarginLoss))
MultiMarginLoss = typing.cast(typing.Type[nn.MultiMarginLoss], basic_unit(nn.MultiMarginLoss))
MultiheadAttention = typing.cast(typing.Type[nn.MultiheadAttention], basic_unit(nn.MultiheadAttention))
NLLLoss = typing.cast(typing.Type[nn.NLLLoss], basic_unit(nn.NLLLoss))
NLLLoss2d = typing.cast(typing.Type[nn.NLLLoss2d], basic_unit(nn.NLLLoss2d))
PReLU = typing.cast(typing.Type[nn.PReLU], basic_unit(nn.PReLU))
PairwiseDistance = typing.cast(typing.Type[nn.PairwiseDistance], basic_unit(nn.PairwiseDistance))
Parameter = nn.Parameter
ParameterDict = typing.cast(typing.Type[nn.ParameterDict], basic_unit(nn.ParameterDict))
ParameterList = nn.ParameterList
PixelShuffle = typing.cast(typing.Type[nn.PixelShuffle], basic_unit(nn.PixelShuffle))
PixelUnshuffle = typing.cast(typing.Type[nn.PixelUnshuffle], basic_unit(nn.PixelUnshuffle))
PoissonNLLLoss = typing.cast(typing.Type[nn.PoissonNLLLoss], basic_unit(nn.PoissonNLLLoss))
RNN = typing.cast(typing.Type[nn.RNN], basic_unit(nn.RNN))
RNNBase = typing.cast(typing.Type[nn.RNNBase], basic_unit(nn.RNNBase))
RNNCell = typing.cast(typing.Type[nn.RNNCell], basic_unit(nn.RNNCell))
RNNCellBase = typing.cast(typing.Type[nn.RNNCellBase], basic_unit(nn.RNNCellBase))
RReLU = typing.cast(typing.Type[nn.RReLU], basic_unit(nn.RReLU))
ReLU = typing.cast(typing.Type[nn.ReLU], basic_unit(nn.ReLU))
ReLU6 = typing.cast(typing.Type[nn.ReLU6], basic_unit(nn.ReLU6))
ReflectionPad1d = typing.cast(typing.Type[nn.ReflectionPad1d], basic_unit(nn.ReflectionPad1d))
ReflectionPad2d = typing.cast(typing.Type[nn.ReflectionPad2d], basic_unit(nn.ReflectionPad2d))
ReflectionPad3d = typing.cast(typing.Type[nn.ReflectionPad3d], basic_unit(nn.ReflectionPad3d))
ReplicationPad1d = typing.cast(typing.Type[nn.ReplicationPad1d], basic_unit(nn.ReplicationPad1d))
ReplicationPad2d = typing.cast(typing.Type[nn.ReplicationPad2d], basic_unit(nn.ReplicationPad2d))
ReplicationPad3d = typing.cast(typing.Type[nn.ReplicationPad3d], basic_unit(nn.ReplicationPad3d))
SELU = typing.cast(typing.Type[nn.SELU], basic_unit(nn.SELU))
Sequential = nn.Sequential
SiLU = typing.cast(typing.Type[nn.SiLU], basic_unit(nn.SiLU))
Sigmoid = typing.cast(typing.Type[nn.Sigmoid], basic_unit(nn.Sigmoid))
SmoothL1Loss = typing.cast(typing.Type[nn.SmoothL1Loss], basic_unit(nn.SmoothL1Loss))
SoftMarginLoss = typing.cast(typing.Type[nn.SoftMarginLoss], basic_unit(nn.SoftMarginLoss))
Softmax = typing.cast(typing.Type[nn.Softmax], basic_unit(nn.Softmax))
Softmax2d = typing.cast(typing.Type[nn.Softmax2d], basic_unit(nn.Softmax2d))
Softmin = typing.cast(typing.Type[nn.Softmin], basic_unit(nn.Softmin))
Softplus = typing.cast(typing.Type[nn.Softplus], basic_unit(nn.Softplus))
Softshrink = typing.cast(typing.Type[nn.Softshrink], basic_unit(nn.Softshrink))
Softsign = typing.cast(typing.Type[nn.Softsign], basic_unit(nn.Softsign))
SyncBatchNorm = typing.cast(typing.Type[nn.SyncBatchNorm], basic_unit(nn.SyncBatchNorm))
Tanh = typing.cast(typing.Type[nn.Tanh], basic_unit(nn.Tanh))
Tanhshrink = typing.cast(typing.Type[nn.Tanhshrink], basic_unit(nn.Tanhshrink))
Threshold = typing.cast(typing.Type[nn.Threshold], basic_unit(nn.Threshold))
Transformer = typing.cast(typing.Type[nn.Transformer], basic_unit(nn.Transformer))
TransformerDecoder = typing.cast(typing.Type[nn.TransformerDecoder], basic_unit(nn.TransformerDecoder))
TransformerDecoderLayer = typing.cast(typing.Type[nn.TransformerDecoderLayer], basic_unit(nn.TransformerDecoderLayer))
TransformerEncoder = typing.cast(typing.Type[nn.TransformerEncoder], basic_unit(nn.TransformerEncoder))
TransformerEncoderLayer = typing.cast(typing.Type[nn.TransformerEncoderLayer], basic_unit(nn.TransformerEncoderLayer))
TripletMarginLoss = typing.cast(typing.Type[nn.TripletMarginLoss], basic_unit(nn.TripletMarginLoss))
TripletMarginWithDistanceLoss = typing.cast(typing.Type[nn.TripletMarginWithDistanceLoss], basic_unit(nn.TripletMarginWithDistanceLoss))
Unflatten = typing.cast(typing.Type[nn.Unflatten], basic_unit(nn.Unflatten))
Unfold = typing.cast(typing.Type[nn.Unfold], basic_unit(nn.Unfold))
UninitializedBuffer = nn.UninitializedBuffer
UninitializedParameter = nn.UninitializedParameter
Upsample = typing.cast(typing.Type[nn.Upsample], basic_unit(nn.Upsample))
UpsamplingBilinear2d = typing.cast(typing.Type[nn.UpsamplingBilinear2d], basic_unit(nn.UpsamplingBilinear2d))
UpsamplingNearest2d = typing.cast(typing.Type[nn.UpsamplingNearest2d], basic_unit(nn.UpsamplingNearest2d))
ZeroPad2d = typing.cast(typing.Type[nn.ZeroPad2d], basic_unit(nn.ZeroPad2d))
_reduction = nn._reduction
common_types = nn.common_types
factory_kwargs = nn.factory_kwargs
functional = nn.functional
grad = nn.grad
init = nn.init
intrinsic = nn.intrinsic
modules = nn.modules
parallel = nn.parallel
parameter = nn.parameter
qat = nn.qat
quantizable = nn.quantizable
quantized = nn.quantized
utils = nn.utils
__all__ = ['AdaptiveAvgPool1d', 'AdaptiveAvgPool2d', 'AdaptiveAvgPool3d', 'AdaptiveLogSoftmaxWithLoss', 'AdaptiveMaxPool1d', 'AdaptiveMaxPool2d', 'AdaptiveMaxPool3d', 'AlphaDropout', 'AvgPool1d', 'AvgPool2d', 'AvgPool3d', 'BCELoss', 'BCEWithLogitsLoss', 'BatchNorm1d', 'BatchNorm2d', 'BatchNorm3d', 'Bilinear', 'CELU', 'CTCLoss', 'ChannelShuffle', 'ConstantPad1d', 'ConstantPad2d', 'ConstantPad3d', 'Container', 'Conv1d', 'Conv2d', 'Conv3d', 'ConvTranspose1d', 'ConvTranspose2d', 'ConvTranspose3d', 'CosineEmbeddingLoss', 'CosineSimilarity', 'CrossEntropyLoss', 'CrossMapLRN2d', 'DataParallel', 'Dropout', 'Dropout2d', 'Dropout3d', 'ELU', 'Embedding', 'EmbeddingBag', 'FeatureAlphaDropout', 'Flatten', 'Fold', 'FractionalMaxPool2d', 'FractionalMaxPool3d', 'GELU', 'GLU', 'GRU', 'GRUCell', 'GaussianNLLLoss', 'GroupNorm', 'Hardshrink', 'Hardsigmoid', 'Hardswish', 'Hardtanh', 'HingeEmbeddingLoss', 'HuberLoss', 'Identity', 'InstanceNorm1d', 'InstanceNorm2d', 'InstanceNorm3d', 'KLDivLoss', 'L1Loss', 'LPPool1d', 'LPPool2d', 'LSTM', 'LSTMCell', 'LayerNorm', 'LazyBatchNorm1d', 'LazyBatchNorm2d', 'LazyBatchNorm3d', 'LazyConv1d', 'LazyConv2d', 'LazyConv3d', 'LazyConvTranspose1d', 'LazyConvTranspose2d', 'LazyConvTranspose3d', 'LazyInstanceNorm1d', 'LazyInstanceNorm2d', 'LazyInstanceNorm3d', 'LazyLinear', 'LeakyReLU', 'Linear', 'LocalResponseNorm', 'LogSigmoid', 'LogSoftmax', 'MSELoss', 'MarginRankingLoss', 'MaxPool1d', 'MaxPool2d', 'MaxPool3d', 'MaxUnpool1d', 'MaxUnpool2d', 'MaxUnpool3d', 'Mish', 'Module', 'ModuleDict', 'ModuleList', 'MultiLabelMarginLoss', 'MultiLabelSoftMarginLoss', 'MultiMarginLoss', 'MultiheadAttention', 'NLLLoss', 'NLLLoss2d', 'PReLU', 'PairwiseDistance', 'Parameter', 'ParameterDict', 'ParameterList', 'PixelShuffle', 'PixelUnshuffle', 'PoissonNLLLoss', 'RNN', 'RNNBase', 'RNNCell', 'RNNCellBase', 'RReLU', 'ReLU', 'ReLU6', 'ReflectionPad1d', 'ReflectionPad2d', 'ReflectionPad3d', 'ReplicationPad1d', 'ReplicationPad2d', 'ReplicationPad3d', 'SELU', 'Sequential', 'SiLU', 'Sigmoid', 'SmoothL1Loss', 'SoftMarginLoss', 'Softmax', 'Softmax2d', 'Softmin', 'Softplus', 'Softshrink', 'Softsign', 'SyncBatchNorm', 'Tanh', 'Tanhshrink', 'Threshold', 'Transformer', 'TransformerDecoder', 'TransformerDecoderLayer', 'TransformerEncoder', 'TransformerEncoderLayer', 'TripletMarginLoss', 'TripletMarginWithDistanceLoss', 'Unflatten', 'Unfold', 'UninitializedBuffer', 'UninitializedParameter', 'Upsample', 'UpsamplingBilinear2d', 'UpsamplingNearest2d', 'ZeroPad2d', '_reduction', 'common_types', 'factory_kwargs', 'functional', 'grad', 'init', 'intrinsic', 'modules', 'parallel', 'parameter', 'qat', 'quantizable', 'quantized', 'utils']